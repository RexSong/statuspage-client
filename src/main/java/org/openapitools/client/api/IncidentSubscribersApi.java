/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PostPagesPageIdIncidentsIncidentIdSubscribers;
import org.openapitools.client.model.Subscriber;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncidentSubscribersApi {
    private ApiClient localVarApiClient;

    public IncidentSubscribersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncidentSubscribersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdCall(pageId, incidentId, subscriberId, _callback);
        return localVarCall;

    }

    /**
     * Unsubscribe an incident subscriber
     * Unsubscribe an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId(String pageId, String incidentId, String subscriberId) throws ApiException {
        ApiResponse<Subscriber> localVarResp = deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo(pageId, incidentId, subscriberId);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe an incident subscriber
     * Unsubscribe an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo(String pageId, String incidentId, String subscriberId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(pageId, incidentId, subscriberId, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe an incident subscriber (asynchronously)
     * Unsubscribe an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(String pageId, String incidentId, String subscriberId, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(pageId, incidentId, subscriberId, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsIncidentIdSubscribers
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incident subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/subscribers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsIncidentIdSubscribers(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling getPagesPageIdIncidentsIncidentIdSubscribers(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of incident subscribers
     * Get a list of incident subscribers
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return List&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incident subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscriber> getPagesPageIdIncidentsIncidentIdSubscribers(String pageId, String incidentId) throws ApiException {
        ApiResponse<List<Subscriber>> localVarResp = getPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo(pageId, incidentId);
        return localVarResp.getData();
    }

    /**
     * Get a list of incident subscribers
     * Get a list of incident subscribers
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;List&lt;Subscriber&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incident subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscriber>> getPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(pageId, incidentId, null);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of incident subscribers (asynchronously)
     * Get a list of incident subscribers
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incident subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersAsync(String pageId, String incidentId, final ApiCallback<List<Subscriber>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(pageId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdCall(pageId, incidentId, subscriberId, _callback);
        return localVarCall;

    }

    /**
     * Get an incident subscriber
     * Get an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId(String pageId, String incidentId, String subscriberId) throws ApiException {
        ApiResponse<Subscriber> localVarResp = getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo(pageId, incidentId, subscriberId);
        return localVarResp.getData();
    }

    /**
     * Get an incident subscriber
     * Get an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdWithHttpInfo(String pageId, String incidentId, String subscriberId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(pageId, incidentId, subscriberId, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an incident subscriber (asynchronously)
     * Get an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(String pageId, String incidentId, String subscriberId, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdValidateBeforeCall(pageId, incidentId, subscriberId, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdIncidentsIncidentIdSubscribers
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param postPagesPageIdIncidentsIncidentIdSubscribers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident subscriber </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersCall(String pageId, String incidentId, PostPagesPageIdIncidentsIncidentIdSubscribers postPagesPageIdIncidentsIncidentIdSubscribers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdIncidentsIncidentIdSubscribers;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/subscribers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(String pageId, String incidentId, PostPagesPageIdIncidentsIncidentIdSubscribers postPagesPageIdIncidentsIncidentIdSubscribers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdIncidentsIncidentIdSubscribers(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling postPagesPageIdIncidentsIncidentIdSubscribers(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdIncidentsIncidentIdSubscribers' is set
        if (postPagesPageIdIncidentsIncidentIdSubscribers == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdIncidentsIncidentIdSubscribers' when calling postPagesPageIdIncidentsIncidentIdSubscribers(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersCall(pageId, incidentId, postPagesPageIdIncidentsIncidentIdSubscribers, _callback);
        return localVarCall;

    }

    /**
     * Create an incident subscriber
     * Create an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param postPagesPageIdIncidentsIncidentIdSubscribers  (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident subscriber </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber postPagesPageIdIncidentsIncidentIdSubscribers(String pageId, String incidentId, PostPagesPageIdIncidentsIncidentIdSubscribers postPagesPageIdIncidentsIncidentIdSubscribers) throws ApiException {
        ApiResponse<Subscriber> localVarResp = postPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo(pageId, incidentId, postPagesPageIdIncidentsIncidentIdSubscribers);
        return localVarResp.getData();
    }

    /**
     * Create an incident subscriber
     * Create an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param postPagesPageIdIncidentsIncidentIdSubscribers  (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident subscriber </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> postPagesPageIdIncidentsIncidentIdSubscribersWithHttpInfo(String pageId, String incidentId, PostPagesPageIdIncidentsIncidentIdSubscribers postPagesPageIdIncidentsIncidentIdSubscribers) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(pageId, incidentId, postPagesPageIdIncidentsIncidentIdSubscribers, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an incident subscriber (asynchronously)
     * Create an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param postPagesPageIdIncidentsIncidentIdSubscribers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident subscriber </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersAsync(String pageId, String incidentId, PostPagesPageIdIncidentsIncidentIdSubscribers postPagesPageIdIncidentsIncidentIdSubscribers, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersValidateBeforeCall(pageId, incidentId, postPagesPageIdIncidentsIncidentIdSubscribers, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(String pageId, String incidentId, String subscriberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationCall(pageId, incidentId, subscriberId, _callback);
        return localVarCall;

    }

    /**
     * Resend confirmation to an incident subscriber
     * Resend confirmation to an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public void postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation(String pageId, String incidentId, String subscriberId) throws ApiException {
        postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationWithHttpInfo(pageId, incidentId, subscriberId);
    }

    /**
     * Resend confirmation to an incident subscriber
     * Resend confirmation to an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationWithHttpInfo(String pageId, String incidentId, String subscriberId) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(pageId, incidentId, subscriberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend confirmation to an incident subscriber (asynchronously)
     * Resend confirmation to an incident subscriber
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to an incident subscriber </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync(String pageId, String incidentId, String subscriberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(pageId, incidentId, subscriberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
