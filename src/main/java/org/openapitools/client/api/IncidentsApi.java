/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Incident;
import org.openapitools.client.model.PatchPagesPageIdIncidents;
import org.openapitools.client.model.PostPagesPageIdIncidents;
import org.openapitools.client.model.PutPagesPageIdIncidents;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncidentsApi {
    private ApiClient localVarApiClient;

    public IncidentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncidentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdIncidentsIncidentId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdIncidentsIncidentIdValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling deletePagesPageIdIncidentsIncidentId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Delete an incident
     * Delete an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an incident </td><td>  -  </td></tr>
     </table>
     */
    public Incident deletePagesPageIdIncidentsIncidentId(String pageId, String incidentId) throws ApiException {
        ApiResponse<Incident> localVarResp = deletePagesPageIdIncidentsIncidentIdWithHttpInfo(pageId, incidentId);
        return localVarResp.getData();
    }

    /**
     * Delete an incident
     * Delete an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an incident </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> deletePagesPageIdIncidentsIncidentIdWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an incident (asynchronously)
     * Delete an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdAsync(String pageId, String incidentId, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidents
     * @param pageId Page identifier (required)
     * @param q If this is specified, search for the text query string in the incidents&#39; name, status, postmortem_body, and incident_updates fields. (optional)
     * @param limit The maximum number of rows to return per page. The default and maximum limit is 100. (optional)
     * @param page Page offset to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incidents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsCall(String pageId, String q, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsValidateBeforeCall(String pageId, String q, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidents(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsCall(pageId, q, limit, page, _callback);
        return localVarCall;

    }

    /**
     * Get a list of incidents
     * Get a list of incidents
     * @param pageId Page identifier (required)
     * @param q If this is specified, search for the text query string in the incidents&#39; name, status, postmortem_body, and incident_updates fields. (optional)
     * @param limit The maximum number of rows to return per page. The default and maximum limit is 100. (optional)
     * @param page Page offset to fetch. (optional)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incidents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> getPagesPageIdIncidents(String pageId, String q, Integer limit, Integer page) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = getPagesPageIdIncidentsWithHttpInfo(pageId, q, limit, page);
        return localVarResp.getData();
    }

    /**
     * Get a list of incidents
     * Get a list of incidents
     * @param pageId Page identifier (required)
     * @param q If this is specified, search for the text query string in the incidents&#39; name, status, postmortem_body, and incident_updates fields. (optional)
     * @param limit The maximum number of rows to return per page. The default and maximum limit is 100. (optional)
     * @param page Page offset to fetch. (optional)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incidents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> getPagesPageIdIncidentsWithHttpInfo(String pageId, String q, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsValidateBeforeCall(pageId, q, limit, page, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of incidents (asynchronously)
     * Get a list of incidents
     * @param pageId Page identifier (required)
     * @param q If this is specified, search for the text query string in the incidents&#39; name, status, postmortem_body, and incident_updates fields. (optional)
     * @param limit The maximum number of rows to return per page. The default and maximum limit is 100. (optional)
     * @param page Page offset to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of incidents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsAsync(String pageId, String q, Integer limit, Integer page, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsValidateBeforeCall(pageId, q, limit, page, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsActiveMaintenance
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of active maintenances </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsActiveMaintenanceCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/active_maintenance"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsActiveMaintenanceValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsActiveMaintenance(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsActiveMaintenanceCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of active maintenances
     * Get a list of active maintenances
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of active maintenances </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> getPagesPageIdIncidentsActiveMaintenance(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = getPagesPageIdIncidentsActiveMaintenanceWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of active maintenances
     * Get a list of active maintenances
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of active maintenances </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> getPagesPageIdIncidentsActiveMaintenanceWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsActiveMaintenanceValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of active maintenances (asynchronously)
     * Get a list of active maintenances
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of active maintenances </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsActiveMaintenanceAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsActiveMaintenanceValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsIncidentId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsIncidentIdValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling getPagesPageIdIncidentsIncidentId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Get an incident
     * Get an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident </td><td>  -  </td></tr>
     </table>
     */
    public Incident getPagesPageIdIncidentsIncidentId(String pageId, String incidentId) throws ApiException {
        ApiResponse<Incident> localVarResp = getPagesPageIdIncidentsIncidentIdWithHttpInfo(pageId, incidentId);
        return localVarResp.getData();
    }

    /**
     * Get an incident
     * Get an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> getPagesPageIdIncidentsIncidentIdWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an incident (asynchronously)
     * Get an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdAsync(String pageId, String incidentId, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsScheduled
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of scheduled incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsScheduledCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/scheduled"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsScheduledValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsScheduled(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsScheduledCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of scheduled incidents
     * Get a list of scheduled incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of scheduled incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> getPagesPageIdIncidentsScheduled(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = getPagesPageIdIncidentsScheduledWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of scheduled incidents
     * Get a list of scheduled incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of scheduled incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> getPagesPageIdIncidentsScheduledWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsScheduledValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of scheduled incidents (asynchronously)
     * Get a list of scheduled incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of scheduled incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsScheduledAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsScheduledValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsUnresolved
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unresolved incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsUnresolvedCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/unresolved"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsUnresolvedValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsUnresolved(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsUnresolvedCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of unresolved incidents
     * Get a list of unresolved incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unresolved incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> getPagesPageIdIncidentsUnresolved(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = getPagesPageIdIncidentsUnresolvedWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of unresolved incidents
     * Get a list of unresolved incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unresolved incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> getPagesPageIdIncidentsUnresolvedWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsUnresolvedValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of unresolved incidents (asynchronously)
     * Get a list of unresolved incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unresolved incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsUnresolvedAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsUnresolvedValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsUpcoming
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of upcoming incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsUpcomingCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/upcoming"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsUpcomingValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsUpcoming(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsUpcomingCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of upcoming incidents
     * Get a list of upcoming incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of upcoming incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> getPagesPageIdIncidentsUpcoming(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = getPagesPageIdIncidentsUpcomingWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of upcoming incidents
     * Get a list of upcoming incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of upcoming incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> getPagesPageIdIncidentsUpcomingWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsUpcomingValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of upcoming incidents (asynchronously)
     * Get a list of upcoming incidents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of upcoming incidents </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsUpcomingAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsUpcomingValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdIncidentsIncidentId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param patchPagesPageIdIncidents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdIncidentsIncidentIdCall(String pageId, String incidentId, PatchPagesPageIdIncidents patchPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdIncidents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdIncidentsIncidentIdValidateBeforeCall(String pageId, String incidentId, PatchPagesPageIdIncidents patchPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling patchPagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdIncidents' is set
        if (patchPagesPageIdIncidents == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdIncidents' when calling patchPagesPageIdIncidentsIncidentId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdIncidentsIncidentIdCall(pageId, incidentId, patchPagesPageIdIncidents, _callback);
        return localVarCall;

    }

    /**
     * Update an incident
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param patchPagesPageIdIncidents  (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public Incident patchPagesPageIdIncidentsIncidentId(String pageId, String incidentId, PatchPagesPageIdIncidents patchPagesPageIdIncidents) throws ApiException {
        ApiResponse<Incident> localVarResp = patchPagesPageIdIncidentsIncidentIdWithHttpInfo(pageId, incidentId, patchPagesPageIdIncidents);
        return localVarResp.getData();
    }

    /**
     * Update an incident
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param patchPagesPageIdIncidents  (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> patchPagesPageIdIncidentsIncidentIdWithHttpInfo(String pageId, String incidentId, PatchPagesPageIdIncidents patchPagesPageIdIncidents) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, patchPagesPageIdIncidents, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an incident (asynchronously)
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param patchPagesPageIdIncidents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdIncidentsIncidentIdAsync(String pageId, String incidentId, PatchPagesPageIdIncidents patchPagesPageIdIncidents, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, patchPagesPageIdIncidents, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdIncidents
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsCall(String pageId, PostPagesPageIdIncidents postPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdIncidents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdIncidentsValidateBeforeCall(String pageId, PostPagesPageIdIncidents postPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdIncidents(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdIncidents' is set
        if (postPagesPageIdIncidents == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdIncidents' when calling postPagesPageIdIncidents(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdIncidentsCall(pageId, postPagesPageIdIncidents, _callback);
        return localVarCall;

    }

    /**
     * Create an incident
     * Create an incident
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidents  (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Incident postPagesPageIdIncidents(String pageId, PostPagesPageIdIncidents postPagesPageIdIncidents) throws ApiException {
        ApiResponse<Incident> localVarResp = postPagesPageIdIncidentsWithHttpInfo(pageId, postPagesPageIdIncidents);
        return localVarResp.getData();
    }

    /**
     * Create an incident
     * Create an incident
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidents  (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> postPagesPageIdIncidentsWithHttpInfo(String pageId, PostPagesPageIdIncidents postPagesPageIdIncidents) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdIncidentsValidateBeforeCall(pageId, postPagesPageIdIncidents, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an incident (asynchronously)
     * Create an incident
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an incident </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentsAsync(String pageId, PostPagesPageIdIncidents postPagesPageIdIncidents, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdIncidentsValidateBeforeCall(pageId, postPagesPageIdIncidents, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdIncidentsIncidentId
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdCall(String pageId, String incidentId, PutPagesPageIdIncidents putPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdIncidents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdIncidentsIncidentIdValidateBeforeCall(String pageId, String incidentId, PutPagesPageIdIncidents putPagesPageIdIncidents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling putPagesPageIdIncidentsIncidentId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdIncidents' is set
        if (putPagesPageIdIncidents == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdIncidents' when calling putPagesPageIdIncidentsIncidentId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdCall(pageId, incidentId, putPagesPageIdIncidents, _callback);
        return localVarCall;

    }

    /**
     * Update an incident
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidents  (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public Incident putPagesPageIdIncidentsIncidentId(String pageId, String incidentId, PutPagesPageIdIncidents putPagesPageIdIncidents) throws ApiException {
        ApiResponse<Incident> localVarResp = putPagesPageIdIncidentsIncidentIdWithHttpInfo(pageId, incidentId, putPagesPageIdIncidents);
        return localVarResp.getData();
    }

    /**
     * Update an incident
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidents  (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> putPagesPageIdIncidentsIncidentIdWithHttpInfo(String pageId, String incidentId, PutPagesPageIdIncidents putPagesPageIdIncidents) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidents, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an incident (asynchronously)
     * Update an incident
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an incident </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdAsync(String pageId, String incidentId, PutPagesPageIdIncidents putPagesPageIdIncidents, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidents, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
