/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ComponentGroupUptime;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.GroupComponent;
import org.openapitools.client.model.PatchPagesPageIdComponentGroups;
import org.openapitools.client.model.PostPagesPageIdComponentGroups;
import org.openapitools.client.model.PutPagesPageIdComponentGroups;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComponentGroupsApi {
    private ApiClient localVarApiClient;

    public ComponentGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComponentGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdComponentGroupsId
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentGroupsIdCall(String pageId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups/{id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdComponentGroupsIdValidateBeforeCall(String pageId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePagesPageIdComponentGroupsId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdComponentGroupsIdCall(pageId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a component group
     * Delete a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @return GroupComponent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public GroupComponent deletePagesPageIdComponentGroupsId(String pageId, String id) throws ApiException {
        ApiResponse<GroupComponent> localVarResp = deletePagesPageIdComponentGroupsIdWithHttpInfo(pageId, id);
        return localVarResp.getData();
    }

    /**
     * Delete a component group
     * Delete a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @return ApiResponse&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupComponent> deletePagesPageIdComponentGroupsIdWithHttpInfo(String pageId, String id) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, null);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a component group (asynchronously)
     * Delete a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentGroupsIdAsync(String pageId, String id, final ApiCallback<GroupComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, _callback);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponentGroups
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of component groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentGroupsValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponentGroups(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of component groups
     * Get a list of component groups
     * @param pageId Page identifier (required)
     * @return List&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of component groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupComponent> getPagesPageIdComponentGroups(String pageId) throws ApiException {
        ApiResponse<List<GroupComponent>> localVarResp = getPagesPageIdComponentGroupsWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a list of component groups
     * Get a list of component groups
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;List&lt;GroupComponent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of component groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupComponent>> getPagesPageIdComponentGroupsWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<List<GroupComponent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of component groups (asynchronously)
     * Get a list of component groups
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of component groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsAsync(String pageId, final ApiCallback<List<GroupComponent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupComponent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponentGroupsId
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsIdCall(String pageId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups/{id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentGroupsIdValidateBeforeCall(String pageId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPagesPageIdComponentGroupsId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdCall(pageId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a component group
     * Get a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @return GroupComponent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public GroupComponent getPagesPageIdComponentGroupsId(String pageId, String id) throws ApiException {
        ApiResponse<GroupComponent> localVarResp = getPagesPageIdComponentGroupsIdWithHttpInfo(pageId, id);
        return localVarResp.getData();
    }

    /**
     * Get a component group
     * Get a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @return ApiResponse&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupComponent> getPagesPageIdComponentGroupsIdWithHttpInfo(String pageId, String id) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, null);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a component group (asynchronously)
     * Get a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsIdAsync(String pageId, String id, final ApiCallback<GroupComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, _callback);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponentGroupsIdUptime
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param start The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component group that has uptime showcase enabled for at least one component. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsIdUptimeCall(String pageId, String id, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups/{id}/uptime"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentGroupsIdUptimeValidateBeforeCall(String pageId, String id, String start, String end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponentGroupsIdUptime(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPagesPageIdComponentGroupsIdUptime(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdUptimeCall(pageId, id, start, end, _callback);
        return localVarCall;

    }

    /**
     * Get uptime data for a component group
     * Get uptime data for a component group that has uptime showcase enabled for at least one component.
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param start The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @return ComponentGroupUptime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component group that has uptime showcase enabled for at least one component. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ComponentGroupUptime getPagesPageIdComponentGroupsIdUptime(String pageId, String id, String start, String end) throws ApiException {
        ApiResponse<ComponentGroupUptime> localVarResp = getPagesPageIdComponentGroupsIdUptimeWithHttpInfo(pageId, id, start, end);
        return localVarResp.getData();
    }

    /**
     * Get uptime data for a component group
     * Get uptime data for a component group that has uptime showcase enabled for at least one component.
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param start The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @return ApiResponse&lt;ComponentGroupUptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component group that has uptime showcase enabled for at least one component. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComponentGroupUptime> getPagesPageIdComponentGroupsIdUptimeWithHttpInfo(String pageId, String id, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdUptimeValidateBeforeCall(pageId, id, start, end, null);
        Type localVarReturnType = new TypeToken<ComponentGroupUptime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get uptime data for a component group (asynchronously)
     * Get uptime data for a component group that has uptime showcase enabled for at least one component.
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param start The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component group that has uptime showcase enabled for at least one component. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentGroupsIdUptimeAsync(String pageId, String id, String start, String end, final ApiCallback<ComponentGroupUptime> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentGroupsIdUptimeValidateBeforeCall(pageId, id, start, end, _callback);
        Type localVarReturnType = new TypeToken<ComponentGroupUptime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdComponentGroupsId
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param patchPagesPageIdComponentGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdComponentGroupsIdCall(String pageId, String id, PatchPagesPageIdComponentGroups patchPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdComponentGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups/{id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdComponentGroupsIdValidateBeforeCall(String pageId, String id, PatchPagesPageIdComponentGroups patchPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchPagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdComponentGroups' is set
        if (patchPagesPageIdComponentGroups == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdComponentGroups' when calling patchPagesPageIdComponentGroupsId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdComponentGroupsIdCall(pageId, id, patchPagesPageIdComponentGroups, _callback);
        return localVarCall;

    }

    /**
     * Update a component group
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param patchPagesPageIdComponentGroups  (required)
     * @return GroupComponent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public GroupComponent patchPagesPageIdComponentGroupsId(String pageId, String id, PatchPagesPageIdComponentGroups patchPagesPageIdComponentGroups) throws ApiException {
        ApiResponse<GroupComponent> localVarResp = patchPagesPageIdComponentGroupsIdWithHttpInfo(pageId, id, patchPagesPageIdComponentGroups);
        return localVarResp.getData();
    }

    /**
     * Update a component group
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param patchPagesPageIdComponentGroups  (required)
     * @return ApiResponse&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupComponent> patchPagesPageIdComponentGroupsIdWithHttpInfo(String pageId, String id, PatchPagesPageIdComponentGroups patchPagesPageIdComponentGroups) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, patchPagesPageIdComponentGroups, null);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a component group (asynchronously)
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param patchPagesPageIdComponentGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdComponentGroupsIdAsync(String pageId, String id, PatchPagesPageIdComponentGroups patchPagesPageIdComponentGroups, final ApiCallback<GroupComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, patchPagesPageIdComponentGroups, _callback);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdComponentGroups
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponentGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentGroupsCall(String pageId, PostPagesPageIdComponentGroups postPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdComponentGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdComponentGroupsValidateBeforeCall(String pageId, PostPagesPageIdComponentGroups postPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdComponentGroups(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdComponentGroups' is set
        if (postPagesPageIdComponentGroups == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdComponentGroups' when calling postPagesPageIdComponentGroups(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdComponentGroupsCall(pageId, postPagesPageIdComponentGroups, _callback);
        return localVarCall;

    }

    /**
     * Create a component group
     * Create a component group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponentGroups  (required)
     * @return GroupComponent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public GroupComponent postPagesPageIdComponentGroups(String pageId, PostPagesPageIdComponentGroups postPagesPageIdComponentGroups) throws ApiException {
        ApiResponse<GroupComponent> localVarResp = postPagesPageIdComponentGroupsWithHttpInfo(pageId, postPagesPageIdComponentGroups);
        return localVarResp.getData();
    }

    /**
     * Create a component group
     * Create a component group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponentGroups  (required)
     * @return ApiResponse&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupComponent> postPagesPageIdComponentGroupsWithHttpInfo(String pageId, PostPagesPageIdComponentGroups postPagesPageIdComponentGroups) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdComponentGroupsValidateBeforeCall(pageId, postPagesPageIdComponentGroups, null);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a component group (asynchronously)
     * Create a component group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponentGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentGroupsAsync(String pageId, PostPagesPageIdComponentGroups postPagesPageIdComponentGroups, final ApiCallback<GroupComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdComponentGroupsValidateBeforeCall(pageId, postPagesPageIdComponentGroups, _callback);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdComponentGroupsId
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param putPagesPageIdComponentGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdComponentGroupsIdCall(String pageId, String id, PutPagesPageIdComponentGroups putPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdComponentGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/component-groups/{id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdComponentGroupsIdValidateBeforeCall(String pageId, String id, PutPagesPageIdComponentGroups putPagesPageIdComponentGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putPagesPageIdComponentGroupsId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdComponentGroups' is set
        if (putPagesPageIdComponentGroups == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdComponentGroups' when calling putPagesPageIdComponentGroupsId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdComponentGroupsIdCall(pageId, id, putPagesPageIdComponentGroups, _callback);
        return localVarCall;

    }

    /**
     * Update a component group
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param putPagesPageIdComponentGroups  (required)
     * @return GroupComponent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public GroupComponent putPagesPageIdComponentGroupsId(String pageId, String id, PutPagesPageIdComponentGroups putPagesPageIdComponentGroups) throws ApiException {
        ApiResponse<GroupComponent> localVarResp = putPagesPageIdComponentGroupsIdWithHttpInfo(pageId, id, putPagesPageIdComponentGroups);
        return localVarResp.getData();
    }

    /**
     * Update a component group
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param putPagesPageIdComponentGroups  (required)
     * @return ApiResponse&lt;GroupComponent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupComponent> putPagesPageIdComponentGroupsIdWithHttpInfo(String pageId, String id, PutPagesPageIdComponentGroups putPagesPageIdComponentGroups) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, putPagesPageIdComponentGroups, null);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a component group (asynchronously)
     * Update a component group
     * @param pageId Page identifier (required)
     * @param id Component group identifier (required)
     * @param putPagesPageIdComponentGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdComponentGroupsIdAsync(String pageId, String id, PutPagesPageIdComponentGroups putPagesPageIdComponentGroups, final ApiCallback<GroupComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdComponentGroupsIdValidateBeforeCall(pageId, id, putPagesPageIdComponentGroups, _callback);
        Type localVarReturnType = new TypeToken<GroupComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
