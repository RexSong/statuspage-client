/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MetricAddResponse;
import org.openapitools.client.model.PatchPagesPageIdMetrics;
import org.openapitools.client.model.PostPagesPageIdMetricsData;
import org.openapitools.client.model.PostPagesPageIdMetricsMetricIdData;
import org.openapitools.client.model.PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics;
import org.openapitools.client.model.PutPagesPageIdMetrics;
import org.openapitools.client.model.SingleMetricAddResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetricsApi
 */
@Ignore
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    
    /**
     * Delete a metric
     *
     * Delete a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdMetricsMetricIdTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        Metric response = api.deletePagesPageIdMetricsMetricId(pageId, metricId);

        // TODO: test validations
    }
    
    /**
     * Reset data for a metric
     *
     * Reset data for a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdMetricsMetricIdDataTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        Metric response = api.deletePagesPageIdMetricsMetricIdData(pageId, metricId);

        // TODO: test validations
    }
    
    /**
     * Get a list of metrics
     *
     * Get a list of metrics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdMetricsTest() throws ApiException {
        String pageId = null;
        Metric response = api.getPagesPageIdMetrics(pageId);

        // TODO: test validations
    }
    
    /**
     * Get a metric
     *
     * Get a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdMetricsMetricIdTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        Metric response = api.getPagesPageIdMetricsMetricId(pageId, metricId);

        // TODO: test validations
    }
    
    /**
     * List metrics for a metric provider
     *
     * List metrics for a metric provider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdMetricsProvidersMetricsProviderIdMetricsTest() throws ApiException {
        String pageId = null;
        String metricsProviderId = null;
        Metric response = api.getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(pageId, metricsProviderId);

        // TODO: test validations
    }
    
    /**
     * Update a metric
     *
     * Update a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPagesPageIdMetricsMetricIdTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        PatchPagesPageIdMetrics patchPagesPageIdMetrics = null;
        Metric response = api.patchPagesPageIdMetricsMetricId(pageId, metricId, patchPagesPageIdMetrics);

        // TODO: test validations
    }
    
    /**
     * Add data points to metrics
     *
     * Add data points to metrics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdMetricsDataTest() throws ApiException {
        String pageId = null;
        PostPagesPageIdMetricsData postPagesPageIdMetricsData = null;
        MetricAddResponse response = api.postPagesPageIdMetricsData(pageId, postPagesPageIdMetricsData);

        // TODO: test validations
    }
    
    /**
     * Add data to a metric
     *
     * Add data to a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdMetricsMetricIdDataTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData = null;
        SingleMetricAddResponse response = api.postPagesPageIdMetricsMetricIdData(pageId, metricId, postPagesPageIdMetricsMetricIdData);

        // TODO: test validations
    }
    
    /**
     * Create a metric for a metric provider
     *
     * Create a metric for a metric provider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdMetricsProvidersMetricsProviderIdMetricsTest() throws ApiException {
        String pageId = null;
        String metricsProviderId = null;
        PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics = null;
        Metric response = api.postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics);

        // TODO: test validations
    }
    
    /**
     * Update a metric
     *
     * Update a metric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPagesPageIdMetricsMetricIdTest() throws ApiException {
        String pageId = null;
        String metricId = null;
        PutPagesPageIdMetrics putPagesPageIdMetrics = null;
        Metric response = api.putPagesPageIdMetricsMetricId(pageId, metricId, putPagesPageIdMetrics);

        // TODO: test validations
    }
    
}
