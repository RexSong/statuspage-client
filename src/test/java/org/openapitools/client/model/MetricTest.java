/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Metric
 */
public class MetricTest {
    private final Metric model = new Metric();

    /**
     * Model tests for Metric
     */
    @Test
    public void testMetric() {
        // TODO: test Metric
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'metricsProviderId'
     */
    @Test
    public void metricsProviderIdTest() {
        // TODO: test metricsProviderId
    }

    /**
     * Test the property 'metricIdentifier'
     */
    @Test
    public void metricIdentifierTest() {
        // TODO: test metricIdentifier
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'display'
     */
    @Test
    public void displayTest() {
        // TODO: test display
    }

    /**
     * Test the property 'tooltipDescription'
     */
    @Test
    public void tooltipDescriptionTest() {
        // TODO: test tooltipDescription
    }

    /**
     * Test the property 'backfilled'
     */
    @Test
    public void backfilledTest() {
        // TODO: test backfilled
    }

    /**
     * Test the property 'yAxisMin'
     */
    @Test
    public void yAxisMinTest() {
        // TODO: test yAxisMin
    }

    /**
     * Test the property 'yAxisMax'
     */
    @Test
    public void yAxisMaxTest() {
        // TODO: test yAxisMax
    }

    /**
     * Test the property 'yAxisHidden'
     */
    @Test
    public void yAxisHiddenTest() {
        // TODO: test yAxisHidden
    }

    /**
     * Test the property 'suffix'
     */
    @Test
    public void suffixTest() {
        // TODO: test suffix
    }

    /**
     * Test the property 'decimalPlaces'
     */
    @Test
    public void decimalPlacesTest() {
        // TODO: test decimalPlaces
    }

    /**
     * Test the property 'mostRecentDataAt'
     */
    @Test
    public void mostRecentDataAtTest() {
        // TODO: test mostRecentDataAt
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'lastFetchedAt'
     */
    @Test
    public void lastFetchedAtTest() {
        // TODO: test lastFetchedAt
    }

    /**
     * Test the property 'backfillPercentage'
     */
    @Test
    public void backfillPercentageTest() {
        // TODO: test backfillPercentage
    }

    /**
     * Test the property 'referenceName'
     */
    @Test
    public void referenceNameTest() {
        // TODO: test referenceName
    }

}
