/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MetricsProvider;
import org.openapitools.client.model.PatchPagesPageIdMetricsProviders;
import org.openapitools.client.model.PostPagesPageIdMetricsProviders;
import org.openapitools.client.model.PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics;
import org.openapitools.client.model.PutPagesPageIdMetricsProviders;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricProvidersApi {
    private ApiClient localVarApiClient;

    public MetricProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdMetricsProvidersMetricsProviderId
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsProvidersMetricsProviderIdCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling deletePagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdMetricsProvidersMetricsProviderIdCall(pageId, metricsProviderId, _callback);
        return localVarCall;

    }

    /**
     * Delete a metric provider
     * Delete a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return MetricsProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public MetricsProvider deletePagesPageIdMetricsProvidersMetricsProviderId(String pageId, String metricsProviderId) throws ApiException {
        ApiResponse<MetricsProvider> localVarResp = deletePagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(pageId, metricsProviderId);
        return localVarResp.getData();
    }

    /**
     * Delete a metric provider
     * Delete a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return ApiResponse&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsProvider> deletePagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(String pageId, String metricsProviderId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, null);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a metric provider (asynchronously)
     * Delete a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsProvidersMetricsProviderIdAsync(String pageId, String metricsProviderId, final ApiCallback<MetricsProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, _callback);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetricsProviders
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metric providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsProvidersValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetricsProviders(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of metric providers
     * Get a list of metric providers
     * @param pageId Page identifier (required)
     * @return List&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metric providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<MetricsProvider> getPagesPageIdMetricsProviders(String pageId) throws ApiException {
        ApiResponse<List<MetricsProvider>> localVarResp = getPagesPageIdMetricsProvidersWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a list of metric providers
     * Get a list of metric providers
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;List&lt;MetricsProvider&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metric providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MetricsProvider>> getPagesPageIdMetricsProvidersWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<List<MetricsProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of metric providers (asynchronously)
     * Get a list of metric providers
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metric providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersAsync(String pageId, final ApiCallback<List<MetricsProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<List<MetricsProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetricsProvidersMetricsProviderId
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling getPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdCall(pageId, metricsProviderId, _callback);
        return localVarCall;

    }

    /**
     * Get a metric provider
     * Get a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return MetricsProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public MetricsProvider getPagesPageIdMetricsProvidersMetricsProviderId(String pageId, String metricsProviderId) throws ApiException {
        ApiResponse<MetricsProvider> localVarResp = getPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(pageId, metricsProviderId);
        return localVarResp.getData();
    }

    /**
     * Get a metric provider
     * Get a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return ApiResponse&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsProvider> getPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(String pageId, String metricsProviderId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, null);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a metric provider (asynchronously)
     * Get a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdAsync(String pageId, String metricsProviderId, final ApiCallback<MetricsProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, _callback);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetricsProvidersMetricsProviderIdMetrics
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(pageId, metricsProviderId, _callback);
        return localVarCall;

    }

    /**
     * List metrics for a metric provider
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(String pageId, String metricsProviderId) throws ApiException {
        ApiResponse<Metric> localVarResp = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(pageId, metricsProviderId);
        return localVarResp.getData();
    }

    /**
     * List metrics for a metric provider
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> getPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(String pageId, String metricsProviderId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metrics for a metric provider (asynchronously)
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(String pageId, String metricsProviderId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdMetricsProvidersMetricsProviderId
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param patchPagesPageIdMetricsProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdMetricsProvidersMetricsProviderIdCall(String pageId, String metricsProviderId, PatchPagesPageIdMetricsProviders patchPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdMetricsProviders;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(String pageId, String metricsProviderId, PatchPagesPageIdMetricsProviders patchPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling patchPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdMetricsProviders' is set
        if (patchPagesPageIdMetricsProviders == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdMetricsProviders' when calling patchPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdMetricsProvidersMetricsProviderIdCall(pageId, metricsProviderId, patchPagesPageIdMetricsProviders, _callback);
        return localVarCall;

    }

    /**
     * Update a metric provider
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param patchPagesPageIdMetricsProviders  (required)
     * @return MetricsProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public MetricsProvider patchPagesPageIdMetricsProvidersMetricsProviderId(String pageId, String metricsProviderId, PatchPagesPageIdMetricsProviders patchPagesPageIdMetricsProviders) throws ApiException {
        ApiResponse<MetricsProvider> localVarResp = patchPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(pageId, metricsProviderId, patchPagesPageIdMetricsProviders);
        return localVarResp.getData();
    }

    /**
     * Update a metric provider
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param patchPagesPageIdMetricsProviders  (required)
     * @return ApiResponse&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsProvider> patchPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(String pageId, String metricsProviderId, PatchPagesPageIdMetricsProviders patchPagesPageIdMetricsProviders) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, patchPagesPageIdMetricsProviders, null);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a metric provider (asynchronously)
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param patchPagesPageIdMetricsProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdMetricsProvidersMetricsProviderIdAsync(String pageId, String metricsProviderId, PatchPagesPageIdMetricsProviders patchPagesPageIdMetricsProviders, final ApiCallback<MetricsProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, patchPagesPageIdMetricsProviders, _callback);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdMetricsProviders
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersCall(String pageId, PostPagesPageIdMetricsProviders postPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdMetricsProviders;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdMetricsProvidersValidateBeforeCall(String pageId, PostPagesPageIdMetricsProviders postPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdMetricsProviders(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdMetricsProviders' is set
        if (postPagesPageIdMetricsProviders == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdMetricsProviders' when calling postPagesPageIdMetricsProviders(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersCall(pageId, postPagesPageIdMetricsProviders, _callback);
        return localVarCall;

    }

    /**
     * Create a metric provider
     * Create a metric provider
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsProviders  (required)
     * @return MetricsProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public MetricsProvider postPagesPageIdMetricsProviders(String pageId, PostPagesPageIdMetricsProviders postPagesPageIdMetricsProviders) throws ApiException {
        ApiResponse<MetricsProvider> localVarResp = postPagesPageIdMetricsProvidersWithHttpInfo(pageId, postPagesPageIdMetricsProviders);
        return localVarResp.getData();
    }

    /**
     * Create a metric provider
     * Create a metric provider
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsProviders  (required)
     * @return ApiResponse&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsProvider> postPagesPageIdMetricsProvidersWithHttpInfo(String pageId, PostPagesPageIdMetricsProviders postPagesPageIdMetricsProviders) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersValidateBeforeCall(pageId, postPagesPageIdMetricsProviders, null);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a metric provider (asynchronously)
     * Create a metric provider
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersAsync(String pageId, PostPagesPageIdMetricsProviders postPagesPageIdMetricsProviders, final ApiCallback<MetricsProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersValidateBeforeCall(pageId, postPagesPageIdMetricsProviders, _callback);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdMetricsProvidersMetricsProviderIdMetrics
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdMetricsProvidersMetricsProviderIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdMetricsProvidersMetricsProviderIdMetrics' is set
        if (postPagesPageIdMetricsProvidersMetricsProviderIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdMetricsProvidersMetricsProviderIdMetrics' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Create a metric for a metric provider
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Metric postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics) throws ApiException {
        ApiResponse<Metric> localVarResp = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Create a metric for a metric provider
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> postPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a metric for a metric provider (asynchronously)
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdMetricsProvidersMetricsProviderId
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param putPagesPageIdMetricsProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdMetricsProvidersMetricsProviderIdCall(String pageId, String metricsProviderId, PutPagesPageIdMetricsProviders putPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdMetricsProviders;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(String pageId, String metricsProviderId, PutPagesPageIdMetricsProviders putPagesPageIdMetricsProviders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling putPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdMetricsProviders' is set
        if (putPagesPageIdMetricsProviders == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdMetricsProviders' when calling putPagesPageIdMetricsProvidersMetricsProviderId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdMetricsProvidersMetricsProviderIdCall(pageId, metricsProviderId, putPagesPageIdMetricsProviders, _callback);
        return localVarCall;

    }

    /**
     * Update a metric provider
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param putPagesPageIdMetricsProviders  (required)
     * @return MetricsProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public MetricsProvider putPagesPageIdMetricsProvidersMetricsProviderId(String pageId, String metricsProviderId, PutPagesPageIdMetricsProviders putPagesPageIdMetricsProviders) throws ApiException {
        ApiResponse<MetricsProvider> localVarResp = putPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(pageId, metricsProviderId, putPagesPageIdMetricsProviders);
        return localVarResp.getData();
    }

    /**
     * Update a metric provider
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param putPagesPageIdMetricsProviders  (required)
     * @return ApiResponse&lt;MetricsProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsProvider> putPagesPageIdMetricsProvidersMetricsProviderIdWithHttpInfo(String pageId, String metricsProviderId, PutPagesPageIdMetricsProviders putPagesPageIdMetricsProviders) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, putPagesPageIdMetricsProviders, null);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a metric provider (asynchronously)
     * Update a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param putPagesPageIdMetricsProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdMetricsProvidersMetricsProviderIdAsync(String pageId, String metricsProviderId, PutPagesPageIdMetricsProviders putPagesPageIdMetricsProviders, final ApiCallback<MetricsProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdMetricsProvidersMetricsProviderIdValidateBeforeCall(pageId, metricsProviderId, putPagesPageIdMetricsProviders, _callback);
        Type localVarReturnType = new TypeToken<MetricsProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
