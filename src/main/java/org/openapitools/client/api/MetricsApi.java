/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.MetricAddResponse;
import org.openapitools.client.model.PatchPagesPageIdMetrics;
import org.openapitools.client.model.PostPagesPageIdMetricsData;
import org.openapitools.client.model.PostPagesPageIdMetricsMetricIdData;
import org.openapitools.client.model.PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics;
import org.openapitools.client.model.PutPagesPageIdMetrics;
import org.openapitools.client.model.SingleMetricAddResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdMetricsMetricId
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsMetricIdCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdMetricsMetricIdValidateBeforeCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling deletePagesPageIdMetricsMetricId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdCall(pageId, metricId, _callback);
        return localVarCall;

    }

    /**
     * Delete a metric
     * Delete a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric deletePagesPageIdMetricsMetricId(String pageId, String metricId) throws ApiException {
        ApiResponse<Metric> localVarResp = deletePagesPageIdMetricsMetricIdWithHttpInfo(pageId, metricId);
        return localVarResp.getData();
    }

    /**
     * Delete a metric
     * Delete a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> deletePagesPageIdMetricsMetricIdWithHttpInfo(String pageId, String metricId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a metric (asynchronously)
     * Delete a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsMetricIdAsync(String pageId, String metricId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdMetricsMetricIdData
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset data for a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsMetricIdDataCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}/data"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdMetricsMetricIdDataValidateBeforeCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdMetricsMetricIdData(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling deletePagesPageIdMetricsMetricIdData(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdDataCall(pageId, metricId, _callback);
        return localVarCall;

    }

    /**
     * Reset data for a metric
     * Reset data for a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset data for a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric deletePagesPageIdMetricsMetricIdData(String pageId, String metricId) throws ApiException {
        ApiResponse<Metric> localVarResp = deletePagesPageIdMetricsMetricIdDataWithHttpInfo(pageId, metricId);
        return localVarResp.getData();
    }

    /**
     * Reset data for a metric
     * Reset data for a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset data for a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> deletePagesPageIdMetricsMetricIdDataWithHttpInfo(String pageId, String metricId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdDataValidateBeforeCall(pageId, metricId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset data for a metric (asynchronously)
     * Reset data for a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset data for a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdMetricsMetricIdDataAsync(String pageId, String metricId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdMetricsMetricIdDataValidateBeforeCall(pageId, metricId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetrics
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of metrics
     * Get a list of metrics
     * @param pageId Page identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric getPagesPageIdMetrics(String pageId) throws ApiException {
        ApiResponse<Metric> localVarResp = getPagesPageIdMetricsWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a list of metrics
     * Get a list of metrics
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> getPagesPageIdMetricsWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of metrics (asynchronously)
     * Get a list of metrics
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsAsync(String pageId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetricsMetricId
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsMetricIdCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsMetricIdValidateBeforeCall(String pageId, String metricId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling getPagesPageIdMetricsMetricId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsMetricIdCall(pageId, metricId, _callback);
        return localVarCall;

    }

    /**
     * Get a metric
     * Get a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric getPagesPageIdMetricsMetricId(String pageId, String metricId) throws ApiException {
        ApiResponse<Metric> localVarResp = getPagesPageIdMetricsMetricIdWithHttpInfo(pageId, metricId);
        return localVarResp.getData();
    }

    /**
     * Get a metric
     * Get a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> getPagesPageIdMetricsMetricIdWithHttpInfo(String pageId, String metricId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a metric (asynchronously)
     * Get a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsMetricIdAsync(String pageId, String metricId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdMetricsProvidersMetricsProviderIdMetrics
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(String pageId, String metricsProviderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(pageId, metricsProviderId, _callback);
        return localVarCall;

    }

    /**
     * List metrics for a metric provider
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Metric getPagesPageIdMetricsProvidersMetricsProviderIdMetrics(String pageId, String metricsProviderId) throws ApiException {
        ApiResponse<Metric> localVarResp = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(pageId, metricsProviderId);
        return localVarResp.getData();
    }

    /**
     * List metrics for a metric provider
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> getPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(String pageId, String metricsProviderId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metrics for a metric provider (asynchronously)
     * List metrics for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List metrics for a metric provider </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(String pageId, String metricsProviderId, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdMetricsMetricId
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param patchPagesPageIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdMetricsMetricIdCall(String pageId, String metricId, PatchPagesPageIdMetrics patchPagesPageIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdMetricsMetricIdValidateBeforeCall(String pageId, String metricId, PatchPagesPageIdMetrics patchPagesPageIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling patchPagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdMetrics' is set
        if (patchPagesPageIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdMetrics' when calling patchPagesPageIdMetricsMetricId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdMetricsMetricIdCall(pageId, metricId, patchPagesPageIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Update a metric
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param patchPagesPageIdMetrics  (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Metric patchPagesPageIdMetricsMetricId(String pageId, String metricId, PatchPagesPageIdMetrics patchPagesPageIdMetrics) throws ApiException {
        ApiResponse<Metric> localVarResp = patchPagesPageIdMetricsMetricIdWithHttpInfo(pageId, metricId, patchPagesPageIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Update a metric
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param patchPagesPageIdMetrics  (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> patchPagesPageIdMetricsMetricIdWithHttpInfo(String pageId, String metricId, PatchPagesPageIdMetrics patchPagesPageIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, patchPagesPageIdMetrics, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a metric (asynchronously)
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param patchPagesPageIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdMetricsMetricIdAsync(String pageId, String metricId, PatchPagesPageIdMetrics patchPagesPageIdMetrics, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, patchPagesPageIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdMetricsData
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data points to metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsDataCall(String pageId, PostPagesPageIdMetricsData postPagesPageIdMetricsData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdMetricsData;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/data"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdMetricsDataValidateBeforeCall(String pageId, PostPagesPageIdMetricsData postPagesPageIdMetricsData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdMetricsData(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdMetricsData' is set
        if (postPagesPageIdMetricsData == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdMetricsData' when calling postPagesPageIdMetricsData(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdMetricsDataCall(pageId, postPagesPageIdMetricsData, _callback);
        return localVarCall;

    }

    /**
     * Add data points to metrics
     * Add data points to metrics
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsData  (required)
     * @return MetricAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data points to metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
     </table>
     */
    public MetricAddResponse postPagesPageIdMetricsData(String pageId, PostPagesPageIdMetricsData postPagesPageIdMetricsData) throws ApiException {
        ApiResponse<MetricAddResponse> localVarResp = postPagesPageIdMetricsDataWithHttpInfo(pageId, postPagesPageIdMetricsData);
        return localVarResp.getData();
    }

    /**
     * Add data points to metrics
     * Add data points to metrics
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsData  (required)
     * @return ApiResponse&lt;MetricAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data points to metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAddResponse> postPagesPageIdMetricsDataWithHttpInfo(String pageId, PostPagesPageIdMetricsData postPagesPageIdMetricsData) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdMetricsDataValidateBeforeCall(pageId, postPagesPageIdMetricsData, null);
        Type localVarReturnType = new TypeToken<MetricAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add data points to metrics (asynchronously)
     * Add data points to metrics
     * @param pageId Page identifier (required)
     * @param postPagesPageIdMetricsData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data points to metrics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsDataAsync(String pageId, PostPagesPageIdMetricsData postPagesPageIdMetricsData, final ApiCallback<MetricAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdMetricsDataValidateBeforeCall(pageId, postPagesPageIdMetricsData, _callback);
        Type localVarReturnType = new TypeToken<MetricAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdMetricsMetricIdData
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param postPagesPageIdMetricsMetricIdData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data to a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsMetricIdDataCall(String pageId, String metricId, PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdMetricsMetricIdData;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}/data"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdMetricsMetricIdDataValidateBeforeCall(String pageId, String metricId, PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdMetricsMetricIdData(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling postPagesPageIdMetricsMetricIdData(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdMetricsMetricIdData' is set
        if (postPagesPageIdMetricsMetricIdData == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdMetricsMetricIdData' when calling postPagesPageIdMetricsMetricIdData(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdMetricsMetricIdDataCall(pageId, metricId, postPagesPageIdMetricsMetricIdData, _callback);
        return localVarCall;

    }

    /**
     * Add data to a metric
     * Add data to a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param postPagesPageIdMetricsMetricIdData  (required)
     * @return SingleMetricAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data to a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public SingleMetricAddResponse postPagesPageIdMetricsMetricIdData(String pageId, String metricId, PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData) throws ApiException {
        ApiResponse<SingleMetricAddResponse> localVarResp = postPagesPageIdMetricsMetricIdDataWithHttpInfo(pageId, metricId, postPagesPageIdMetricsMetricIdData);
        return localVarResp.getData();
    }

    /**
     * Add data to a metric
     * Add data to a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param postPagesPageIdMetricsMetricIdData  (required)
     * @return ApiResponse&lt;SingleMetricAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data to a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleMetricAddResponse> postPagesPageIdMetricsMetricIdDataWithHttpInfo(String pageId, String metricId, PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdMetricsMetricIdDataValidateBeforeCall(pageId, metricId, postPagesPageIdMetricsMetricIdData, null);
        Type localVarReturnType = new TypeToken<SingleMetricAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add data to a metric (asynchronously)
     * Add data to a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param postPagesPageIdMetricsMetricIdData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add data to a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsMetricIdDataAsync(String pageId, String metricId, PostPagesPageIdMetricsMetricIdData postPagesPageIdMetricsMetricIdData, final ApiCallback<SingleMetricAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdMetricsMetricIdDataValidateBeforeCall(pageId, metricId, postPagesPageIdMetricsMetricIdData, _callback);
        Type localVarReturnType = new TypeToken<SingleMetricAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdMetricsProvidersMetricsProviderIdMetrics
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdMetricsProvidersMetricsProviderIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metrics_provider_id" + "\\}", localVarApiClient.escapeString(metricsProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'metricsProviderId' is set
        if (metricsProviderId == null) {
            throw new ApiException("Missing the required parameter 'metricsProviderId' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdMetricsProvidersMetricsProviderIdMetrics' is set
        if (postPagesPageIdMetricsProvidersMetricsProviderIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdMetricsProvidersMetricsProviderIdMetrics' when calling postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Create a metric for a metric provider
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Metric postPagesPageIdMetricsProvidersMetricsProviderIdMetrics(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics) throws ApiException {
        ApiResponse<Metric> localVarResp = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Create a metric for a metric provider
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> postPagesPageIdMetricsProvidersMetricsProviderIdMetricsWithHttpInfo(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a metric for a metric provider (asynchronously)
     * Create a metric for a metric provider
     * @param pageId Page identifier (required)
     * @param metricsProviderId Metric Provider Identifier (required)
     * @param postPagesPageIdMetricsProvidersMetricsProviderIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a metric for a metric provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(String pageId, String metricsProviderId, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdMetricsProvidersMetricsProviderIdMetricsValidateBeforeCall(pageId, metricsProviderId, postPagesPageIdMetricsProvidersMetricsProviderIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdMetricsMetricId
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param putPagesPageIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdMetricsMetricIdCall(String pageId, String metricId, PutPagesPageIdMetrics putPagesPageIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/metrics/{metric_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdMetricsMetricIdValidateBeforeCall(String pageId, String metricId, PutPagesPageIdMetrics putPagesPageIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling putPagesPageIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdMetrics' is set
        if (putPagesPageIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdMetrics' when calling putPagesPageIdMetricsMetricId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdMetricsMetricIdCall(pageId, metricId, putPagesPageIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Update a metric
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param putPagesPageIdMetrics  (required)
     * @return Metric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Metric putPagesPageIdMetricsMetricId(String pageId, String metricId, PutPagesPageIdMetrics putPagesPageIdMetrics) throws ApiException {
        ApiResponse<Metric> localVarResp = putPagesPageIdMetricsMetricIdWithHttpInfo(pageId, metricId, putPagesPageIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Update a metric
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param putPagesPageIdMetrics  (required)
     * @return ApiResponse&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metric> putPagesPageIdMetricsMetricIdWithHttpInfo(String pageId, String metricId, PutPagesPageIdMetrics putPagesPageIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, putPagesPageIdMetrics, null);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a metric (asynchronously)
     * Update a metric
     * @param pageId Page identifier (required)
     * @param metricId Metric Identifier (required)
     * @param putPagesPageIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdMetricsMetricIdAsync(String pageId, String metricId, PutPagesPageIdMetrics putPagesPageIdMetrics, final ApiCallback<Metric> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdMetricsMetricIdValidateBeforeCall(pageId, metricId, putPagesPageIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<Metric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
