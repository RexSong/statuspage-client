/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Component;
import org.openapitools.client.model.DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PageAccessGroup;
import org.openapitools.client.model.PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;
import org.openapitools.client.model.PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;
import org.openapitools.client.model.PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageAccessGroupComponentsApi {
    private ApiClient localVarApiClient;

    public PageAccessGroupComponentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageAccessGroupComponentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(String pageId, String pageAccessGroupId, DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(String pageId, String pageAccessGroupId, DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents' is set
        if (deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents == null) {
            throw new ApiException("Missing the required parameter 'deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(pageId, pageAccessGroupId, deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Delete components for a page access group
     * Delete components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(String pageId, String pageAccessGroupId, DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(pageId, pageAccessGroupId, deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents);
        return localVarResp.getData();
    }

    /**
     * Delete components for a page access group
     * Delete components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(String pageId, String pageAccessGroupId, DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete components for a page access group (asynchronously)
     * Delete components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(String pageId, String pageAccessGroupId, DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a component from a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdCall(String pageId, String pageAccessGroupId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdValidateBeforeCall(String pageId, String pageAccessGroupId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdCall(pageId, pageAccessGroupId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Remove a component from a page access group
     * Remove a component from a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param componentId Component identifier (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a component from a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId(String pageId, String pageAccessGroupId, String componentId) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdWithHttpInfo(pageId, pageAccessGroupId, componentId);
        return localVarResp.getData();
    }

    /**
     * Remove a component from a page access group
     * Remove a component from a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a component from a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdWithHttpInfo(String pageId, String pageAccessGroupId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdValidateBeforeCall(pageId, pageAccessGroupId, componentId, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a component from a page access group (asynchronously)
     * Remove a component from a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a component from a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdAsync(String pageId, String pageAccessGroupId, String componentId, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdValidateBeforeCall(pageId, pageAccessGroupId, componentId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling getPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(pageId, pageAccessGroupId, _callback);
        return localVarCall;

    }

    /**
     * List components for a page access group
     * List components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Component> getPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(String pageId, String pageAccessGroupId) throws ApiException {
        ApiResponse<List<Component>> localVarResp = getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(pageId, pageAccessGroupId);
        return localVarResp.getData();
    }

    /**
     * List components for a page access group
     * List components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Component>> getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(String pageId, String pageAccessGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List components for a page access group (asynchronously)
     * List components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(String pageId, String pageAccessGroupId, final ApiCallback<List<Component>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' is set
        if (patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Add components to page access group
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents);
        return localVarResp.getData();
    }

    /**
     * Add components to page access group
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add components to page access group (asynchronously)
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(String pageId, String pageAccessGroupId, PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(String pageId, String pageAccessGroupId, PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' is set
        if (postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' when calling postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(pageId, pageAccessGroupId, postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Replace components for a page access group
     * Replace components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(String pageId, String pageAccessGroupId, PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(pageId, pageAccessGroupId, postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents);
        return localVarResp.getData();
    }

    /**
     * Replace components for a page access group
     * Replace components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(String pageId, String pageAccessGroupId, PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace components for a page access group (asynchronously)
     * Replace components for a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(String pageId, String pageAccessGroupId, PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' is set
        if (putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents' when calling putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Add components to page access group
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents);
        return localVarResp.getData();
    }

    /**
     * Add components to page access group
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsWithHttpInfo(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add components to page access group (asynchronously)
     * Add components to page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components to page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsValidateBeforeCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
