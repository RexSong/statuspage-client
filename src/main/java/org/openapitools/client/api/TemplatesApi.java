/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.IncidentTemplate;
import org.openapitools.client.model.PostPagesPageIdIncidentTemplates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPagesPageIdIncidentTemplates
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of templates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentTemplatesCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incident_templates"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentTemplatesValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentTemplatesCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of templates
     * Get a list of templates
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return List&lt;IncidentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of templates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public List<IncidentTemplate> getPagesPageIdIncidentTemplates(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<IncidentTemplate>> localVarResp = getPagesPageIdIncidentTemplatesWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of templates
     * Get a list of templates
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;IncidentTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of templates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IncidentTemplate>> getPagesPageIdIncidentTemplatesWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentTemplatesValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<IncidentTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of templates (asynchronously)
     * Get a list of templates
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional, default to 1)
     * @param perPage Number of results to return per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of templates </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentTemplatesAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<IncidentTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentTemplatesValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<IncidentTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdIncidentTemplates
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidentTemplates  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentTemplatesCall(String pageId, PostPagesPageIdIncidentTemplates postPagesPageIdIncidentTemplates, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdIncidentTemplates;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incident_templates"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdIncidentTemplatesValidateBeforeCall(String pageId, PostPagesPageIdIncidentTemplates postPagesPageIdIncidentTemplates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdIncidentTemplates(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdIncidentTemplates' is set
        if (postPagesPageIdIncidentTemplates == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdIncidentTemplates' when calling postPagesPageIdIncidentTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdIncidentTemplatesCall(pageId, postPagesPageIdIncidentTemplates, _callback);
        return localVarCall;

    }

    /**
     * Create a template
     * Create a template
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidentTemplates  (required)
     * @return IncidentTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public IncidentTemplate postPagesPageIdIncidentTemplates(String pageId, PostPagesPageIdIncidentTemplates postPagesPageIdIncidentTemplates) throws ApiException {
        ApiResponse<IncidentTemplate> localVarResp = postPagesPageIdIncidentTemplatesWithHttpInfo(pageId, postPagesPageIdIncidentTemplates);
        return localVarResp.getData();
    }

    /**
     * Create a template
     * Create a template
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidentTemplates  (required)
     * @return ApiResponse&lt;IncidentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncidentTemplate> postPagesPageIdIncidentTemplatesWithHttpInfo(String pageId, PostPagesPageIdIncidentTemplates postPagesPageIdIncidentTemplates) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdIncidentTemplatesValidateBeforeCall(pageId, postPagesPageIdIncidentTemplates, null);
        Type localVarReturnType = new TypeToken<IncidentTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a template (asynchronously)
     * Create a template
     * @param pageId Page identifier (required)
     * @param postPagesPageIdIncidentTemplates  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdIncidentTemplatesAsync(String pageId, PostPagesPageIdIncidentTemplates postPagesPageIdIncidentTemplates, final ApiCallback<IncidentTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdIncidentTemplatesValidateBeforeCall(pageId, postPagesPageIdIncidentTemplates, _callback);
        Type localVarReturnType = new TypeToken<IncidentTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
