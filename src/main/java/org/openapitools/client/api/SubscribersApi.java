/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PatchPagesPageIdSubscribers;
import org.openapitools.client.model.PostPagesPageIdSubscribers;
import org.openapitools.client.model.PostPagesPageIdSubscribersReactivate;
import org.openapitools.client.model.PostPagesPageIdSubscribersResendConfirmation;
import org.openapitools.client.model.PostPagesPageIdSubscribersUnsubscribe;
import org.openapitools.client.model.Subscriber;
import org.openapitools.client.model.SubscriberCountByType;
import org.openapitools.client.model.SubscriberCountByTypeAndState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscribersApi {
    private ApiClient localVarApiClient;

    public SubscribersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscribersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdSubscribersSubscriberId
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param skipUnsubscriptionNotification If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdSubscribersSubscriberIdCall(String pageId, String subscriberId, Boolean skipUnsubscriptionNotification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/{subscriber_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipUnsubscriptionNotification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_unsubscription_notification", skipUnsubscriptionNotification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdSubscribersSubscriberIdValidateBeforeCall(String pageId, String subscriberId, Boolean skipUnsubscriptionNotification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling deletePagesPageIdSubscribersSubscriberId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdSubscribersSubscriberIdCall(pageId, subscriberId, skipUnsubscriptionNotification, _callback);
        return localVarCall;

    }

    /**
     * Unsubscribe a subscriber
     * Unsubscribe a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param skipUnsubscriptionNotification If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed. (optional)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber deletePagesPageIdSubscribersSubscriberId(String pageId, String subscriberId, Boolean skipUnsubscriptionNotification) throws ApiException {
        ApiResponse<Subscriber> localVarResp = deletePagesPageIdSubscribersSubscriberIdWithHttpInfo(pageId, subscriberId, skipUnsubscriptionNotification);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe a subscriber
     * Unsubscribe a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param skipUnsubscriptionNotification If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed. (optional)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> deletePagesPageIdSubscribersSubscriberIdWithHttpInfo(String pageId, String subscriberId, Boolean skipUnsubscriptionNotification) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, skipUnsubscriptionNotification, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe a subscriber (asynchronously)
     * Unsubscribe a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param skipUnsubscriptionNotification If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdSubscribersSubscriberIdAsync(String pageId, String subscriberId, Boolean skipUnsubscriptionNotification, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, skipUnsubscriptionNotification, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdSubscribers
     * @param pageId Page identifier (required)
     * @param q If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers. (optional)
     * @param type If specified, only return subscribers of the indicated type. (optional)
     * @param state If this is present, only return subscribers in this state. Specify state \&quot;all\&quot; to find subscribers in any states. (optional, default to active)
     * @param limit The maximum number of rows to return. If a text query string is specified (q&#x3D;), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. (optional)
     * @param page The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. (optional, default to 0)
     * @param sortField The field on which to sort: &#39;primary&#39; to indicate sorting by the identifying field, &#39;created_at&#39; for sorting by creation timestamp, &#39;quarantined_at&#39; for sorting by quarantine timestamp, and &#39;relevance&#39; which sorts by the relevancy of the search text. &#39;relevance&#39; is not a valid parameter if no search text is supplied. (optional, default to primary)
     * @param sortDirection The sort direction of the listing. (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersCall(String pageId, String q, String type, String state, Integer limit, Integer page, String sortField, String sortDirection, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdSubscribersValidateBeforeCall(String pageId, String q, String type, String state, Integer limit, Integer page, String sortField, String sortDirection, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdSubscribers(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdSubscribersCall(pageId, q, type, state, limit, page, sortField, sortDirection, _callback);
        return localVarCall;

    }

    /**
     * Get a list of subscribers
     * Get a list of subscribers
     * @param pageId Page identifier (required)
     * @param q If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers. (optional)
     * @param type If specified, only return subscribers of the indicated type. (optional)
     * @param state If this is present, only return subscribers in this state. Specify state \&quot;all\&quot; to find subscribers in any states. (optional, default to active)
     * @param limit The maximum number of rows to return. If a text query string is specified (q&#x3D;), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. (optional)
     * @param page The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. (optional, default to 0)
     * @param sortField The field on which to sort: &#39;primary&#39; to indicate sorting by the identifying field, &#39;created_at&#39; for sorting by creation timestamp, &#39;quarantined_at&#39; for sorting by quarantine timestamp, and &#39;relevance&#39; which sorts by the relevancy of the search text. &#39;relevance&#39; is not a valid parameter if no search text is supplied. (optional, default to primary)
     * @param sortDirection The sort direction of the listing. (optional, default to asc)
     * @return List&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscriber> getPagesPageIdSubscribers(String pageId, String q, String type, String state, Integer limit, Integer page, String sortField, String sortDirection) throws ApiException {
        ApiResponse<List<Subscriber>> localVarResp = getPagesPageIdSubscribersWithHttpInfo(pageId, q, type, state, limit, page, sortField, sortDirection);
        return localVarResp.getData();
    }

    /**
     * Get a list of subscribers
     * Get a list of subscribers
     * @param pageId Page identifier (required)
     * @param q If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers. (optional)
     * @param type If specified, only return subscribers of the indicated type. (optional)
     * @param state If this is present, only return subscribers in this state. Specify state \&quot;all\&quot; to find subscribers in any states. (optional, default to active)
     * @param limit The maximum number of rows to return. If a text query string is specified (q&#x3D;), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. (optional)
     * @param page The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. (optional, default to 0)
     * @param sortField The field on which to sort: &#39;primary&#39; to indicate sorting by the identifying field, &#39;created_at&#39; for sorting by creation timestamp, &#39;quarantined_at&#39; for sorting by quarantine timestamp, and &#39;relevance&#39; which sorts by the relevancy of the search text. &#39;relevance&#39; is not a valid parameter if no search text is supplied. (optional, default to primary)
     * @param sortDirection The sort direction of the listing. (optional, default to asc)
     * @return ApiResponse&lt;List&lt;Subscriber&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscriber>> getPagesPageIdSubscribersWithHttpInfo(String pageId, String q, String type, String state, Integer limit, Integer page, String sortField, String sortDirection) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdSubscribersValidateBeforeCall(pageId, q, type, state, limit, page, sortField, sortDirection, null);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of subscribers (asynchronously)
     * Get a list of subscribers
     * @param pageId Page identifier (required)
     * @param q If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers. (optional)
     * @param type If specified, only return subscribers of the indicated type. (optional)
     * @param state If this is present, only return subscribers in this state. Specify state \&quot;all\&quot; to find subscribers in any states. (optional, default to active)
     * @param limit The maximum number of rows to return. If a text query string is specified (q&#x3D;), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. (optional)
     * @param page The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. (optional, default to 0)
     * @param sortField The field on which to sort: &#39;primary&#39; to indicate sorting by the identifying field, &#39;created_at&#39; for sorting by creation timestamp, &#39;quarantined_at&#39; for sorting by quarantine timestamp, and &#39;relevance&#39; which sorts by the relevancy of the search text. &#39;relevance&#39; is not a valid parameter if no search text is supplied. (optional, default to primary)
     * @param sortDirection The sort direction of the listing. (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersAsync(String pageId, String q, String type, String state, Integer limit, Integer page, String sortField, String sortDirection, final ApiCallback<List<Subscriber>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdSubscribersValidateBeforeCall(pageId, q, type, state, limit, page, sortField, sortDirection, _callback);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdSubscribersCount
     * @param pageId Page identifier (required)
     * @param type If this is present, only count subscribers of this type. (optional)
     * @param state If this is present, only count subscribers in this state. Specify state \&quot;all\&quot; to count subscribers in any states. (optional, default to active)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a count of subscribers by type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersCountCall(String pageId, String type, String state, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/count"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdSubscribersCountValidateBeforeCall(String pageId, String type, String state, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdSubscribersCount(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdSubscribersCountCall(pageId, type, state, _callback);
        return localVarCall;

    }

    /**
     * Get a count of subscribers by type
     * Get a count of subscribers by type
     * @param pageId Page identifier (required)
     * @param type If this is present, only count subscribers of this type. (optional)
     * @param state If this is present, only count subscribers in this state. Specify state \&quot;all\&quot; to count subscribers in any states. (optional, default to active)
     * @return SubscriberCountByType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a count of subscribers by type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriberCountByType getPagesPageIdSubscribersCount(String pageId, String type, String state) throws ApiException {
        ApiResponse<SubscriberCountByType> localVarResp = getPagesPageIdSubscribersCountWithHttpInfo(pageId, type, state);
        return localVarResp.getData();
    }

    /**
     * Get a count of subscribers by type
     * Get a count of subscribers by type
     * @param pageId Page identifier (required)
     * @param type If this is present, only count subscribers of this type. (optional)
     * @param state If this is present, only count subscribers in this state. Specify state \&quot;all\&quot; to count subscribers in any states. (optional, default to active)
     * @return ApiResponse&lt;SubscriberCountByType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a count of subscribers by type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriberCountByType> getPagesPageIdSubscribersCountWithHttpInfo(String pageId, String type, String state) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdSubscribersCountValidateBeforeCall(pageId, type, state, null);
        Type localVarReturnType = new TypeToken<SubscriberCountByType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a count of subscribers by type (asynchronously)
     * Get a count of subscribers by type
     * @param pageId Page identifier (required)
     * @param type If this is present, only count subscribers of this type. (optional)
     * @param state If this is present, only count subscribers in this state. Specify state \&quot;all\&quot; to count subscribers in any states. (optional, default to active)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a count of subscribers by type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersCountAsync(String pageId, String type, String state, final ApiCallback<SubscriberCountByType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdSubscribersCountValidateBeforeCall(pageId, type, state, _callback);
        Type localVarReturnType = new TypeToken<SubscriberCountByType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdSubscribersHistogramByState
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a histogram of subscribers by type and then state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersHistogramByStateCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/histogram_by_state"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdSubscribersHistogramByStateValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdSubscribersHistogramByState(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdSubscribersHistogramByStateCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a histogram of subscribers by type and then state
     * Get a histogram of subscribers by type and then state
     * @param pageId Page identifier (required)
     * @return SubscriberCountByTypeAndState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a histogram of subscribers by type and then state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public SubscriberCountByTypeAndState getPagesPageIdSubscribersHistogramByState(String pageId) throws ApiException {
        ApiResponse<SubscriberCountByTypeAndState> localVarResp = getPagesPageIdSubscribersHistogramByStateWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a histogram of subscribers by type and then state
     * Get a histogram of subscribers by type and then state
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;SubscriberCountByTypeAndState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a histogram of subscribers by type and then state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriberCountByTypeAndState> getPagesPageIdSubscribersHistogramByStateWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdSubscribersHistogramByStateValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<SubscriberCountByTypeAndState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a histogram of subscribers by type and then state (asynchronously)
     * Get a histogram of subscribers by type and then state
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a histogram of subscribers by type and then state </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersHistogramByStateAsync(String pageId, final ApiCallback<SubscriberCountByTypeAndState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdSubscribersHistogramByStateValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<SubscriberCountByTypeAndState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdSubscribersSubscriberId
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersSubscriberIdCall(String pageId, String subscriberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/{subscriber_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdSubscribersSubscriberIdValidateBeforeCall(String pageId, String subscriberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling getPagesPageIdSubscribersSubscriberId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdSubscribersSubscriberIdCall(pageId, subscriberId, _callback);
        return localVarCall;

    }

    /**
     * Get a subscriber
     * Get a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber getPagesPageIdSubscribersSubscriberId(String pageId, String subscriberId) throws ApiException {
        ApiResponse<Subscriber> localVarResp = getPagesPageIdSubscribersSubscriberIdWithHttpInfo(pageId, subscriberId);
        return localVarResp.getData();
    }

    /**
     * Get a subscriber
     * Get a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> getPagesPageIdSubscribersSubscriberIdWithHttpInfo(String pageId, String subscriberId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a subscriber (asynchronously)
     * Get a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersSubscriberIdAsync(String pageId, String subscriberId, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdSubscribersUnsubscribed
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unsubscribed subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersUnsubscribedCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/unsubscribed"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdSubscribersUnsubscribedValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdSubscribersUnsubscribed(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdSubscribersUnsubscribedCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of unsubscribed subscribers
     * Get a list of unsubscribed subscribers
     * @param pageId Page identifier (required)
     * @return List&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unsubscribed subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscriber> getPagesPageIdSubscribersUnsubscribed(String pageId) throws ApiException {
        ApiResponse<List<Subscriber>> localVarResp = getPagesPageIdSubscribersUnsubscribedWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a list of unsubscribed subscribers
     * Get a list of unsubscribed subscribers
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;List&lt;Subscriber&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unsubscribed subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscriber>> getPagesPageIdSubscribersUnsubscribedWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdSubscribersUnsubscribedValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of unsubscribed subscribers (asynchronously)
     * Get a list of unsubscribed subscribers
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of unsubscribed subscribers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdSubscribersUnsubscribedAsync(String pageId, final ApiCallback<List<Subscriber>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdSubscribersUnsubscribedValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<List<Subscriber>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdSubscribersSubscriberId
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param patchPagesPageIdSubscribers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdSubscribersSubscriberIdCall(String pageId, String subscriberId, PatchPagesPageIdSubscribers patchPagesPageIdSubscribers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdSubscribers;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/{subscriber_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdSubscribersSubscriberIdValidateBeforeCall(String pageId, String subscriberId, PatchPagesPageIdSubscribers patchPagesPageIdSubscribers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling patchPagesPageIdSubscribersSubscriberId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdSubscribers' is set
        if (patchPagesPageIdSubscribers == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdSubscribers' when calling patchPagesPageIdSubscribersSubscriberId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdSubscribersSubscriberIdCall(pageId, subscriberId, patchPagesPageIdSubscribers, _callback);
        return localVarCall;

    }

    /**
     * Update a subscriber
     * Update a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param patchPagesPageIdSubscribers  (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber patchPagesPageIdSubscribersSubscriberId(String pageId, String subscriberId, PatchPagesPageIdSubscribers patchPagesPageIdSubscribers) throws ApiException {
        ApiResponse<Subscriber> localVarResp = patchPagesPageIdSubscribersSubscriberIdWithHttpInfo(pageId, subscriberId, patchPagesPageIdSubscribers);
        return localVarResp.getData();
    }

    /**
     * Update a subscriber
     * Update a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param patchPagesPageIdSubscribers  (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> patchPagesPageIdSubscribersSubscriberIdWithHttpInfo(String pageId, String subscriberId, PatchPagesPageIdSubscribers patchPagesPageIdSubscribers) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, patchPagesPageIdSubscribers, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a subscriber (asynchronously)
     * Update a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param patchPagesPageIdSubscribers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdSubscribersSubscriberIdAsync(String pageId, String subscriberId, PatchPagesPageIdSubscribers patchPagesPageIdSubscribers, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdSubscribersSubscriberIdValidateBeforeCall(pageId, subscriberId, patchPagesPageIdSubscribers, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdSubscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a subscriber. Not applicable for Slack subscribers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersCall(String pageId, PostPagesPageIdSubscribers postPagesPageIdSubscribers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdSubscribers;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdSubscribersValidateBeforeCall(String pageId, PostPagesPageIdSubscribers postPagesPageIdSubscribers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdSubscribers(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdSubscribers' is set
        if (postPagesPageIdSubscribers == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdSubscribers' when calling postPagesPageIdSubscribers(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdSubscribersCall(pageId, postPagesPageIdSubscribers, _callback);
        return localVarCall;

    }

    /**
     * Create a subscriber
     * Create a subscriber. Not applicable for Slack subscribers.
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribers  (required)
     * @return Subscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a subscriber. Not applicable for Slack subscribers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Subscriber postPagesPageIdSubscribers(String pageId, PostPagesPageIdSubscribers postPagesPageIdSubscribers) throws ApiException {
        ApiResponse<Subscriber> localVarResp = postPagesPageIdSubscribersWithHttpInfo(pageId, postPagesPageIdSubscribers);
        return localVarResp.getData();
    }

    /**
     * Create a subscriber
     * Create a subscriber. Not applicable for Slack subscribers.
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribers  (required)
     * @return ApiResponse&lt;Subscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a subscriber. Not applicable for Slack subscribers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscriber> postPagesPageIdSubscribersWithHttpInfo(String pageId, PostPagesPageIdSubscribers postPagesPageIdSubscribers) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdSubscribersValidateBeforeCall(pageId, postPagesPageIdSubscribers, null);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a subscriber (asynchronously)
     * Create a subscriber. Not applicable for Slack subscribers.
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a subscriber. Not applicable for Slack subscribers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersAsync(String pageId, PostPagesPageIdSubscribers postPagesPageIdSubscribers, final ApiCallback<Subscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdSubscribersValidateBeforeCall(pageId, postPagesPageIdSubscribers, _callback);
        Type localVarReturnType = new TypeToken<Subscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdSubscribersReactivate
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersReactivate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reactivate a list of quarantined subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersReactivateCall(String pageId, PostPagesPageIdSubscribersReactivate postPagesPageIdSubscribersReactivate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdSubscribersReactivate;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/reactivate"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdSubscribersReactivateValidateBeforeCall(String pageId, PostPagesPageIdSubscribersReactivate postPagesPageIdSubscribersReactivate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdSubscribersReactivate(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdSubscribersReactivate' is set
        if (postPagesPageIdSubscribersReactivate == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdSubscribersReactivate' when calling postPagesPageIdSubscribersReactivate(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdSubscribersReactivateCall(pageId, postPagesPageIdSubscribersReactivate, _callback);
        return localVarCall;

    }

    /**
     * Reactivate a list of subscribers
     * Reactivate a list of quarantined subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersReactivate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reactivate a list of quarantined subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void postPagesPageIdSubscribersReactivate(String pageId, PostPagesPageIdSubscribersReactivate postPagesPageIdSubscribersReactivate) throws ApiException {
        postPagesPageIdSubscribersReactivateWithHttpInfo(pageId, postPagesPageIdSubscribersReactivate);
    }

    /**
     * Reactivate a list of subscribers
     * Reactivate a list of quarantined subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersReactivate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reactivate a list of quarantined subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPagesPageIdSubscribersReactivateWithHttpInfo(String pageId, PostPagesPageIdSubscribersReactivate postPagesPageIdSubscribersReactivate) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdSubscribersReactivateValidateBeforeCall(pageId, postPagesPageIdSubscribersReactivate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reactivate a list of subscribers (asynchronously)
     * Reactivate a list of quarantined subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersReactivate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reactivate a list of quarantined subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersReactivateAsync(String pageId, PostPagesPageIdSubscribersReactivate postPagesPageIdSubscribersReactivate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdSubscribersReactivateValidateBeforeCall(pageId, postPagesPageIdSubscribersReactivate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdSubscribersResendConfirmation
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersResendConfirmation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmations to a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersResendConfirmationCall(String pageId, PostPagesPageIdSubscribersResendConfirmation postPagesPageIdSubscribersResendConfirmation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdSubscribersResendConfirmation;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/resend_confirmation"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdSubscribersResendConfirmationValidateBeforeCall(String pageId, PostPagesPageIdSubscribersResendConfirmation postPagesPageIdSubscribersResendConfirmation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdSubscribersResendConfirmation(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdSubscribersResendConfirmation' is set
        if (postPagesPageIdSubscribersResendConfirmation == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdSubscribersResendConfirmation' when calling postPagesPageIdSubscribersResendConfirmation(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdSubscribersResendConfirmationCall(pageId, postPagesPageIdSubscribersResendConfirmation, _callback);
        return localVarCall;

    }

    /**
     * Resend confirmations to a list of subscribers
     * Resend confirmations to a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersResendConfirmation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmations to a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void postPagesPageIdSubscribersResendConfirmation(String pageId, PostPagesPageIdSubscribersResendConfirmation postPagesPageIdSubscribersResendConfirmation) throws ApiException {
        postPagesPageIdSubscribersResendConfirmationWithHttpInfo(pageId, postPagesPageIdSubscribersResendConfirmation);
    }

    /**
     * Resend confirmations to a list of subscribers
     * Resend confirmations to a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersResendConfirmation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmations to a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPagesPageIdSubscribersResendConfirmationWithHttpInfo(String pageId, PostPagesPageIdSubscribersResendConfirmation postPagesPageIdSubscribersResendConfirmation) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdSubscribersResendConfirmationValidateBeforeCall(pageId, postPagesPageIdSubscribersResendConfirmation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend confirmations to a list of subscribers (asynchronously)
     * Resend confirmations to a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersResendConfirmation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmations to a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersResendConfirmationAsync(String pageId, PostPagesPageIdSubscribersResendConfirmation postPagesPageIdSubscribersResendConfirmation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdSubscribersResendConfirmationValidateBeforeCall(pageId, postPagesPageIdSubscribersResendConfirmation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdSubscribersSubscriberIdResendConfirmation
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersSubscriberIdResendConfirmationCall(String pageId, String subscriberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/{subscriber_id}/resend_confirmation"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "subscriber_id" + "\\}", localVarApiClient.escapeString(subscriberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(String pageId, String subscriberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdSubscribersSubscriberIdResendConfirmation(Async)");
        }
        
        // verify the required parameter 'subscriberId' is set
        if (subscriberId == null) {
            throw new ApiException("Missing the required parameter 'subscriberId' when calling postPagesPageIdSubscribersSubscriberIdResendConfirmation(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdSubscribersSubscriberIdResendConfirmationCall(pageId, subscriberId, _callback);
        return localVarCall;

    }

    /**
     * Resend confirmation to a subscriber
     * Resend confirmation to a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void postPagesPageIdSubscribersSubscriberIdResendConfirmation(String pageId, String subscriberId) throws ApiException {
        postPagesPageIdSubscribersSubscriberIdResendConfirmationWithHttpInfo(pageId, subscriberId);
    }

    /**
     * Resend confirmation to a subscriber
     * Resend confirmation to a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPagesPageIdSubscribersSubscriberIdResendConfirmationWithHttpInfo(String pageId, String subscriberId) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(pageId, subscriberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend confirmation to a subscriber (asynchronously)
     * Resend confirmation to a subscriber
     * @param pageId Page identifier (required)
     * @param subscriberId Subscriber Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resend confirmation to a subscriber </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersSubscriberIdResendConfirmationAsync(String pageId, String subscriberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdSubscribersSubscriberIdResendConfirmationValidateBeforeCall(pageId, subscriberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdSubscribersUnsubscribe
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersUnsubscribe  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unsubscribe a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersUnsubscribeCall(String pageId, PostPagesPageIdSubscribersUnsubscribe postPagesPageIdSubscribersUnsubscribe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdSubscribersUnsubscribe;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/subscribers/unsubscribe"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdSubscribersUnsubscribeValidateBeforeCall(String pageId, PostPagesPageIdSubscribersUnsubscribe postPagesPageIdSubscribersUnsubscribe, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdSubscribersUnsubscribe(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdSubscribersUnsubscribe' is set
        if (postPagesPageIdSubscribersUnsubscribe == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdSubscribersUnsubscribe' when calling postPagesPageIdSubscribersUnsubscribe(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdSubscribersUnsubscribeCall(pageId, postPagesPageIdSubscribersUnsubscribe, _callback);
        return localVarCall;

    }

    /**
     * Unsubscribe a list of subscribers
     * Unsubscribe a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersUnsubscribe  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unsubscribe a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void postPagesPageIdSubscribersUnsubscribe(String pageId, PostPagesPageIdSubscribersUnsubscribe postPagesPageIdSubscribersUnsubscribe) throws ApiException {
        postPagesPageIdSubscribersUnsubscribeWithHttpInfo(pageId, postPagesPageIdSubscribersUnsubscribe);
    }

    /**
     * Unsubscribe a list of subscribers
     * Unsubscribe a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersUnsubscribe  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unsubscribe a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPagesPageIdSubscribersUnsubscribeWithHttpInfo(String pageId, PostPagesPageIdSubscribersUnsubscribe postPagesPageIdSubscribersUnsubscribe) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdSubscribersUnsubscribeValidateBeforeCall(pageId, postPagesPageIdSubscribersUnsubscribe, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsubscribe a list of subscribers (asynchronously)
     * Unsubscribe a list of subscribers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdSubscribersUnsubscribe  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unsubscribe a list of subscribers </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdSubscribersUnsubscribeAsync(String pageId, PostPagesPageIdSubscribersUnsubscribe postPagesPageIdSubscribersUnsubscribe, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdSubscribersUnsubscribeValidateBeforeCall(pageId, postPagesPageIdSubscribersUnsubscribe, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
