/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.PageAccessUser;
import org.openapitools.client.model.PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics;
import org.openapitools.client.model.PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics;
import org.openapitools.client.model.PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageAccessUserMetricsApi {
    private ApiClient localVarApiClient;

    public PageAccessUserMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageAccessUserMetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics' is set
        if (deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Delete metrics for page access user
     * Delete metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Delete metrics for page access user
     * Delete metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete metrics for page access user (asynchronously)
     * Delete metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param metricId Identifier of metric requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metric for page access user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdCall(String pageId, String pageAccessUserId, String metricId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics/{metric_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()))
            .replaceAll("\\{" + "metric_id" + "\\}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdValidateBeforeCall(String pageId, String pageAccessUserId, String metricId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId(Async)");
        }
        
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdCall(pageId, pageAccessUserId, metricId, _callback);
        return localVarCall;

    }

    /**
     * Delete metric for page access user
     * Delete metric for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param metricId Identifier of metric requested (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metric for page access user </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId(String pageId, String pageAccessUserId, String metricId) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdWithHttpInfo(pageId, pageAccessUserId, metricId);
        return localVarResp.getData();
    }

    /**
     * Delete metric for page access user
     * Delete metric for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param metricId Identifier of metric requested (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metric for page access user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdWithHttpInfo(String pageId, String pageAccessUserId, String metricId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdValidateBeforeCall(pageId, pageAccessUserId, metricId, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete metric for page access user (asynchronously)
     * Delete metric for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param metricId Identifier of metric requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete metric for page access user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdAsync(String pageId, String pageAccessUserId, String metricId, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdValidateBeforeCall(pageId, pageAccessUserId, metricId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessUsersPageAccessUserIdMetrics
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling getPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Get metrics for page access user
     * Get metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return List&lt;Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Metric> getPagesPageIdPageAccessUsersPageAccessUserIdMetrics(String pageId, String pageAccessUserId) throws ApiException {
        ApiResponse<List<Metric>> localVarResp = getPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(pageId, pageAccessUserId);
        return localVarResp.getData();
    }

    /**
     * Get metrics for page access user
     * Get metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;List&lt;Metric&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Metric>> getPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, null);
        Type localVarReturnType = new TypeToken<List<Metric>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for page access user (asynchronously)
     * Get metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(String pageId, String pageAccessUserId, final ApiCallback<List<Metric>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, _callback);
        Type localVarReturnType = new TypeToken<List<Metric>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics' is set
        if (patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Add metrics for page access user
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Add metrics for page access user
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add metrics for page access user (asynchronously)
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdPageAccessUsersPageAccessUserIdMetrics
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdPageAccessUsersPageAccessUserIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling postPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdPageAccessUsersPageAccessUserIdMetrics' is set
        if (postPagesPageIdPageAccessUsersPageAccessUserIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdPageAccessUsersPageAccessUserIdMetrics' when calling postPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Replace metrics for page access user
     * Replace metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser postPagesPageIdPageAccessUsersPageAccessUserIdMetrics(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics postPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = postPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Replace metrics for page access user
     * Replace metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> postPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics postPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace metrics for page access user (asynchronously)
     * Replace metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdPageAccessUsersPageAccessUserIdMetrics
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdPageAccessUsersPageAccessUserIdMetrics;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling putPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdPageAccessUsersPageAccessUserIdMetrics' is set
        if (putPagesPageIdPageAccessUsersPageAccessUserIdMetrics == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdPageAccessUsersPageAccessUserIdMetrics' when calling putPagesPageIdPageAccessUsersPageAccessUserIdMetrics(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdMetricsCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        return localVarCall;

    }

    /**
     * Add metrics for page access user
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser putPagesPageIdPageAccessUsersPageAccessUserIdMetrics(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics putPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = putPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdMetrics);
        return localVarResp.getData();
    }

    /**
     * Add metrics for page access user
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> putPagesPageIdPageAccessUsersPageAccessUserIdMetricsWithHttpInfo(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics putPagesPageIdPageAccessUsersPageAccessUserIdMetrics) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add metrics for page access user (asynchronously)
     * Add metrics for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdMetrics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add metrics for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdMetricsValidateBeforeCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdMetrics, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
