/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PageAccessUser;
import org.openapitools.client.model.PostPagesPageIdPageAccessUsers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageAccessUsersApi {
    private ApiClient localVarApiClient;

    public PageAccessUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageAccessUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdPageAccessUsersPageAccessUserId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling deletePagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Delete page access user
     * Delete page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePagesPageIdPageAccessUsersPageAccessUserId(String pageId, String pageAccessUserId) throws ApiException {
        deletePagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(pageId, pageAccessUserId);
    }

    /**
     * Delete page access user
     * Delete page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete page access user (asynchronously)
     * Delete page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdAsync(String pageId, String pageAccessUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessUsers
     * @param pageId Page identifier (required)
     * @param email Email address to search for (optional)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access users </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersCall(String pageId, String email, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessUsersValidateBeforeCall(String pageId, String email, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersCall(pageId, email, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of page access users
     * Get a list of page access users
     * @param pageId Page identifier (required)
     * @param email Email address to search for (optional)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @return List&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access users </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<PageAccessUser> getPagesPageIdPageAccessUsers(String pageId, String email, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<PageAccessUser>> localVarResp = getPagesPageIdPageAccessUsersWithHttpInfo(pageId, email, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of page access users
     * Get a list of page access users
     * @param pageId Page identifier (required)
     * @param email Email address to search for (optional)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @return ApiResponse&lt;List&lt;PageAccessUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access users </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PageAccessUser>> getPagesPageIdPageAccessUsersWithHttpInfo(String pageId, String email, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersValidateBeforeCall(pageId, email, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<PageAccessUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of page access users (asynchronously)
     * Get a list of page access users
     * @param pageId Page identifier (required)
     * @param email Email address to search for (optional)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access users </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersAsync(String pageId, String email, Integer page, Integer perPage, final ApiCallback<List<PageAccessUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersValidateBeforeCall(pageId, email, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<PageAccessUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessUsersPageAccessUserId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling getPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Get page access user
     * Get page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser getPagesPageIdPageAccessUsersPageAccessUserId(String pageId, String pageAccessUserId) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = getPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(pageId, pageAccessUserId);
        return localVarResp.getData();
    }

    /**
     * Get page access user
     * Get page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> getPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get page access user (asynchronously)
     * Get page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdAsync(String pageId, String pageAccessUserId, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdPageAccessUsersPageAccessUserId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling patchPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Update page access user
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser patchPagesPageIdPageAccessUsersPageAccessUserId(String pageId, String pageAccessUserId) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = patchPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(pageId, pageAccessUserId);
        return localVarResp.getData();
    }

    /**
     * Update page access user
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> patchPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update page access user (asynchronously)
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdAsync(String pageId, String pageAccessUserId, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdPageAccessUsers
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessUsers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a page access user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be processed due to a conflict in resource state. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersCall(String pageId, PostPagesPageIdPageAccessUsers postPagesPageIdPageAccessUsers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdPageAccessUsers;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdPageAccessUsersValidateBeforeCall(String pageId, PostPagesPageIdPageAccessUsers postPagesPageIdPageAccessUsers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdPageAccessUsers(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdPageAccessUsers' is set
        if (postPagesPageIdPageAccessUsers == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdPageAccessUsers' when calling postPagesPageIdPageAccessUsers(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersCall(pageId, postPagesPageIdPageAccessUsers, _callback);
        return localVarCall;

    }

    /**
     * Add a page access user
     * Add a page access user
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessUsers  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a page access user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be processed due to a conflict in resource state. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser postPagesPageIdPageAccessUsers(String pageId, PostPagesPageIdPageAccessUsers postPagesPageIdPageAccessUsers) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = postPagesPageIdPageAccessUsersWithHttpInfo(pageId, postPagesPageIdPageAccessUsers);
        return localVarResp.getData();
    }

    /**
     * Add a page access user
     * Add a page access user
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessUsers  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a page access user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be processed due to a conflict in resource state. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> postPagesPageIdPageAccessUsersWithHttpInfo(String pageId, PostPagesPageIdPageAccessUsers postPagesPageIdPageAccessUsers) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersValidateBeforeCall(pageId, postPagesPageIdPageAccessUsers, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a page access user (asynchronously)
     * Add a page access user
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessUsers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a page access user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be processed due to a conflict in resource state. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersAsync(String pageId, PostPagesPageIdPageAccessUsers postPagesPageIdPageAccessUsers, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersValidateBeforeCall(pageId, postPagesPageIdPageAccessUsers, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdPageAccessUsersPageAccessUserId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling putPagesPageIdPageAccessUsersPageAccessUserId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Update page access user
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser putPagesPageIdPageAccessUsersPageAccessUserId(String pageId, String pageAccessUserId) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = putPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(pageId, pageAccessUserId);
        return localVarResp.getData();
    }

    /**
     * Update page access user
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> putPagesPageIdPageAccessUsersPageAccessUserIdWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update page access user (asynchronously)
     * Update page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdAsync(String pageId, String pageAccessUserId, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdValidateBeforeCall(pageId, pageAccessUserId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
