/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Component;
import org.openapitools.client.model.DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PageAccessUser;
import org.openapitools.client.model.PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents;
import org.openapitools.client.model.PostPagesPageIdPageAccessUsersPageAccessUserIdComponents;
import org.openapitools.client.model.PutPagesPageIdPageAccessUsersPageAccessUserIdComponents;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageAccessUserComponentsApi {
    private ApiClient localVarApiClient;

    public PageAccessUserComponentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageAccessUserComponentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdPageAccessUsersPageAccessUserIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deletePagesPageIdPageAccessUsersPageAccessUserIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'deletePagesPageIdPageAccessUsersPageAccessUserIdComponents' is set
        if (deletePagesPageIdPageAccessUsersPageAccessUserIdComponents == null) {
            throw new ApiException("Missing the required parameter 'deletePagesPageIdPageAccessUsersPageAccessUserIdComponents' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Remove components for page access user
     * Remove components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser deletePagesPageIdPageAccessUsersPageAccessUserIdComponents(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents deletePagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdComponents);
        return localVarResp.getData();
    }

    /**
     * Remove components for page access user
     * Remove components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents deletePagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove components for page access user (asynchronously)
     * Remove components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param deletePagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(String pageId, String pageAccessUserId, DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, deletePagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove component for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdCall(String pageId, String pageAccessUserId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdValidateBeforeCall(String pageId, String pageAccessUserId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdCall(pageId, pageAccessUserId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Remove component for page access user
     * Remove component for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param componentId Component identifier (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove component for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId(String pageId, String pageAccessUserId, String componentId) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdWithHttpInfo(pageId, pageAccessUserId, componentId);
        return localVarResp.getData();
    }

    /**
     * Remove component for page access user
     * Remove component for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove component for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdWithHttpInfo(String pageId, String pageAccessUserId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdValidateBeforeCall(pageId, pageAccessUserId, componentId, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove component for page access user (asynchronously)
     * Remove component for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove component for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync(String pageId, String pageAccessUserId, String componentId, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdValidateBeforeCall(pageId, pageAccessUserId, componentId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessUsersPageAccessUserIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(String pageId, String pageAccessUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling getPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(pageId, pageAccessUserId, _callback);
        return localVarCall;

    }

    /**
     * Get components for page access user
     * Get components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Component> getPagesPageIdPageAccessUsersPageAccessUserIdComponents(String pageId, String pageAccessUserId) throws ApiException {
        ApiResponse<List<Component>> localVarResp = getPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(pageId, pageAccessUserId);
        return localVarResp.getData();
    }

    /**
     * Get components for page access user
     * Get components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Component>> getPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(String pageId, String pageAccessUserId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get components for page access user (asynchronously)
     * Get components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(String pageId, String pageAccessUserId, final ApiCallback<List<Component>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, _callback);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdPageAccessUsersPageAccessUserIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdPageAccessUsersPageAccessUserIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdPageAccessUsersPageAccessUserIdComponents' is set
        if (patchPagesPageIdPageAccessUsersPageAccessUserIdComponents == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdPageAccessUsersPageAccessUserIdComponents' when calling patchPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Add components for page access user
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser patchPagesPageIdPageAccessUsersPageAccessUserIdComponents(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents patchPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdComponents);
        return localVarResp.getData();
    }

    /**
     * Add components for page access user
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents patchPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add components for page access user (asynchronously)
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param patchPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(String pageId, String pageAccessUserId, PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, patchPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdPageAccessUsersPageAccessUserIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdComponents postPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdPageAccessUsersPageAccessUserIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdComponents postPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdPageAccessUsersPageAccessUserIdComponents' is set
        if (postPagesPageIdPageAccessUsersPageAccessUserIdComponents == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdPageAccessUsersPageAccessUserIdComponents' when calling postPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Replace components for page access user
     * Replace components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser postPagesPageIdPageAccessUsersPageAccessUserIdComponents(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdComponents postPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = postPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdComponents);
        return localVarResp.getData();
    }

    /**
     * Replace components for page access user
     * Replace components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> postPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdComponents postPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace components for page access user (asynchronously)
     * Replace components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param postPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replace components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(String pageId, String pageAccessUserId, PostPagesPageIdPageAccessUsersPageAccessUserIdComponents postPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, postPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdPageAccessUsersPageAccessUserIdComponents
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdComponents putPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdPageAccessUsersPageAccessUserIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_user_id" + "\\}", localVarApiClient.escapeString(pageAccessUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdComponents putPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'pageAccessUserId' is set
        if (pageAccessUserId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserId' when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdPageAccessUsersPageAccessUserIdComponents' is set
        if (putPagesPageIdPageAccessUsersPageAccessUserIdComponents == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdPageAccessUsersPageAccessUserIdComponents' when calling putPagesPageIdPageAccessUsersPageAccessUserIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdComponentsCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Add components for page access user
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return PageAccessUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessUser putPagesPageIdPageAccessUsersPageAccessUserIdComponents(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdComponents putPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        ApiResponse<PageAccessUser> localVarResp = putPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdComponents);
        return localVarResp.getData();
    }

    /**
     * Add components for page access user
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @return ApiResponse&lt;PageAccessUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessUser> putPagesPageIdPageAccessUsersPageAccessUserIdComponentsWithHttpInfo(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdComponents putPagesPageIdPageAccessUsersPageAccessUserIdComponents) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdComponents, null);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add components for page access user (asynchronously)
     * Add components for page access user
     * @param pageId Page identifier (required)
     * @param pageAccessUserId Page Access User Identifier (required)
     * @param putPagesPageIdPageAccessUsersPageAccessUserIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add components for page access user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(String pageId, String pageAccessUserId, PutPagesPageIdPageAccessUsersPageAccessUserIdComponents putPagesPageIdPageAccessUsersPageAccessUserIdComponents, final ApiCallback<PageAccessUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdPageAccessUsersPageAccessUserIdComponentsValidateBeforeCall(pageId, pageAccessUserId, putPagesPageIdPageAccessUsersPageAccessUserIdComponents, _callback);
        Type localVarReturnType = new TypeToken<PageAccessUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
