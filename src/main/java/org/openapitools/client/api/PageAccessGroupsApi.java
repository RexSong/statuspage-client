/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PageAccessGroup;
import org.openapitools.client.model.PatchPagesPageIdPageAccessGroups;
import org.openapitools.client.model.PostPagesPageIdPageAccessGroups;
import org.openapitools.client.model.PutPagesPageIdPageAccessGroups;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageAccessGroupsApi {
    private ApiClient localVarApiClient;

    public PageAccessGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageAccessGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdPageAccessGroupsPageAccessGroupId
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling deletePagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdCall(pageId, pageAccessGroupId, _callback);
        return localVarCall;

    }

    /**
     * Remove a page access group
     * Remove a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup deletePagesPageIdPageAccessGroupsPageAccessGroupId(String pageId, String pageAccessGroupId) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = deletePagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(pageId, pageAccessGroupId);
        return localVarResp.getData();
    }

    /**
     * Remove a page access group
     * Remove a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> deletePagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(String pageId, String pageAccessGroupId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a page access group (asynchronously)
     * Remove a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync(String pageId, String pageAccessGroupId, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessGroups
     * @param pageId Page identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessGroupsValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessGroups(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of page access groups
     * Get a list of page access groups
     * @param pageId Page identifier (required)
     * @return List&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public List<PageAccessGroup> getPagesPageIdPageAccessGroups(String pageId) throws ApiException {
        ApiResponse<List<PageAccessGroup>> localVarResp = getPagesPageIdPageAccessGroupsWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get a list of page access groups
     * Get a list of page access groups
     * @param pageId Page identifier (required)
     * @return ApiResponse&lt;List&lt;PageAccessGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PageAccessGroup>> getPagesPageIdPageAccessGroupsWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<List<PageAccessGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of page access groups (asynchronously)
     * Get a list of page access groups
     * @param pageId Page identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of page access groups </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsAsync(String pageId, final ApiCallback<List<PageAccessGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<List<PageAccessGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdPageAccessGroupsPageAccessGroupId
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(String pageId, String pageAccessGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling getPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdCall(pageId, pageAccessGroupId, _callback);
        return localVarCall;

    }

    /**
     * Get a page access group
     * Get a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup getPagesPageIdPageAccessGroupsPageAccessGroupId(String pageId, String pageAccessGroupId) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = getPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(pageId, pageAccessGroupId);
        return localVarResp.getData();
    }

    /**
     * Get a page access group
     * Get a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> getPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(String pageId, String pageAccessGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a page access group (asynchronously)
     * Get a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(String pageId, String pageAccessGroupId, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdPageAccessGroupsPageAccessGroupId
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdCall(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroups patchPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdPageAccessGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroups patchPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdPageAccessGroups' is set
        if (patchPagesPageIdPageAccessGroups == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdPageAccessGroups' when calling patchPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroups, _callback);
        return localVarCall;

    }

    /**
     * Update a page access group
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroups  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup patchPagesPageIdPageAccessGroupsPageAccessGroupId(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroups patchPagesPageIdPageAccessGroups) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = patchPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroups);
        return localVarResp.getData();
    }

    /**
     * Update a page access group
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroups  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> patchPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroups patchPagesPageIdPageAccessGroups) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroups, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a page access group (asynchronously)
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param patchPagesPageIdPageAccessGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(String pageId, String pageAccessGroupId, PatchPagesPageIdPageAccessGroups patchPagesPageIdPageAccessGroups, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, patchPagesPageIdPageAccessGroups, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdPageAccessGroups
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a page access group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessGroupsCall(String pageId, PostPagesPageIdPageAccessGroups postPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdPageAccessGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdPageAccessGroupsValidateBeforeCall(String pageId, PostPagesPageIdPageAccessGroups postPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdPageAccessGroups(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdPageAccessGroups' is set
        if (postPagesPageIdPageAccessGroups == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdPageAccessGroups' when calling postPagesPageIdPageAccessGroups(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsCall(pageId, postPagesPageIdPageAccessGroups, _callback);
        return localVarCall;

    }

    /**
     * Create a page access group
     * Create a page access group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessGroups  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a page access group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup postPagesPageIdPageAccessGroups(String pageId, PostPagesPageIdPageAccessGroups postPagesPageIdPageAccessGroups) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = postPagesPageIdPageAccessGroupsWithHttpInfo(pageId, postPagesPageIdPageAccessGroups);
        return localVarResp.getData();
    }

    /**
     * Create a page access group
     * Create a page access group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessGroups  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a page access group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> postPagesPageIdPageAccessGroupsWithHttpInfo(String pageId, PostPagesPageIdPageAccessGroups postPagesPageIdPageAccessGroups) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsValidateBeforeCall(pageId, postPagesPageIdPageAccessGroups, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a page access group (asynchronously)
     * Create a page access group
     * @param pageId Page identifier (required)
     * @param postPagesPageIdPageAccessGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a page access group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdPageAccessGroupsAsync(String pageId, PostPagesPageIdPageAccessGroups postPagesPageIdPageAccessGroups, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdPageAccessGroupsValidateBeforeCall(pageId, postPagesPageIdPageAccessGroups, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdPageAccessGroupsPageAccessGroupId
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdCall(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroups putPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdPageAccessGroups;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/page_access_groups/{page_access_group_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "page_access_group_id" + "\\}", localVarApiClient.escapeString(pageAccessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroups putPagesPageIdPageAccessGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'pageAccessGroupId' is set
        if (pageAccessGroupId == null) {
            throw new ApiException("Missing the required parameter 'pageAccessGroupId' when calling putPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdPageAccessGroups' is set
        if (putPagesPageIdPageAccessGroups == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdPageAccessGroups' when calling putPagesPageIdPageAccessGroupsPageAccessGroupId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroups, _callback);
        return localVarCall;

    }

    /**
     * Update a page access group
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroups  (required)
     * @return PageAccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public PageAccessGroup putPagesPageIdPageAccessGroupsPageAccessGroupId(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroups putPagesPageIdPageAccessGroups) throws ApiException {
        ApiResponse<PageAccessGroup> localVarResp = putPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroups);
        return localVarResp.getData();
    }

    /**
     * Update a page access group
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroups  (required)
     * @return ApiResponse&lt;PageAccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageAccessGroup> putPagesPageIdPageAccessGroupsPageAccessGroupIdWithHttpInfo(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroups putPagesPageIdPageAccessGroups) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroups, null);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a page access group (asynchronously)
     * Update a page access group
     * @param pageId Page identifier (required)
     * @param pageAccessGroupId Page Access Group Identifier (required)
     * @param putPagesPageIdPageAccessGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a page access group </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(String pageId, String pageAccessGroupId, PutPagesPageIdPageAccessGroups putPagesPageIdPageAccessGroups, final ApiCallback<PageAccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdPageAccessGroupsPageAccessGroupIdValidateBeforeCall(pageId, pageAccessGroupId, putPagesPageIdPageAccessGroups, _callback);
        Type localVarReturnType = new TypeToken<PageAccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
