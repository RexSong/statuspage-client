/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Postmortem;
import org.openapitools.client.model.PutPagesPageIdIncidentsIncidentIdPostmortem;
import org.openapitools.client.model.PutPagesPageIdIncidentsIncidentIdPostmortemPublish;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncidentPostmortemApi {
    private ApiClient localVarApiClient;

    public IncidentPostmortemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncidentPostmortemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdIncidentsIncidentIdPostmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdPostmortemCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/postmortem"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling deletePagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdPostmortemCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Postmortem
     * Delete Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePagesPageIdIncidentsIncidentIdPostmortem(String pageId, String incidentId) throws ApiException {
        deletePagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(pageId, incidentId);
    }

    /**
     * Delete Postmortem
     * Delete Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Postmortem (asynchronously)
     * Delete Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdIncidentsIncidentIdPostmortemAsync(String pageId, String incidentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdIncidentsIncidentIdPostmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdPostmortemCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/postmortem"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling getPagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdPostmortemCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Get Postmortem
     * Get Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return Postmortem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Postmortem getPagesPageIdIncidentsIncidentIdPostmortem(String pageId, String incidentId) throws ApiException {
        ApiResponse<Postmortem> localVarResp = getPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(pageId, incidentId);
        return localVarResp.getData();
    }

    /**
     * Get Postmortem
     * Get Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;Postmortem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postmortem> getPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, null);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Postmortem (asynchronously)
     * Get Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Postmortem </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdIncidentsIncidentIdPostmortemAsync(String pageId, String incidentId, final ApiCallback<Postmortem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdIncidentsIncidentIdPostmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemCall(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortem putPagesPageIdIncidentsIncidentIdPostmortem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdIncidentsIncidentIdPostmortem;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/postmortem"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortem putPagesPageIdIncidentsIncidentIdPostmortem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling putPagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdIncidentsIncidentIdPostmortem' is set
        if (putPagesPageIdIncidentsIncidentIdPostmortem == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdIncidentsIncidentIdPostmortem' when calling putPagesPageIdIncidentsIncidentIdPostmortem(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortem, _callback);
        return localVarCall;

    }

    /**
     * Create Postmortem
     * Create Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortem  (required)
     * @return Postmortem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public Postmortem putPagesPageIdIncidentsIncidentIdPostmortem(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortem putPagesPageIdIncidentsIncidentIdPostmortem) throws ApiException {
        ApiResponse<Postmortem> localVarResp = putPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortem);
        return localVarResp.getData();
    }

    /**
     * Create Postmortem
     * Create Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortem  (required)
     * @return ApiResponse&lt;Postmortem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postmortem> putPagesPageIdIncidentsIncidentIdPostmortemWithHttpInfo(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortem putPagesPageIdIncidentsIncidentIdPostmortem) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortem, null);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Postmortem (asynchronously)
     * Create Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemAsync(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortem putPagesPageIdIncidentsIncidentIdPostmortem, final ApiCallback<Postmortem> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortem, _callback);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdIncidentsIncidentIdPostmortemPublish
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortemPublish  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Publish Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemPublishCall(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortemPublish putPagesPageIdIncidentsIncidentIdPostmortemPublish, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdIncidentsIncidentIdPostmortemPublish;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/postmortem/publish"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemPublishValidateBeforeCall(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortemPublish putPagesPageIdIncidentsIncidentIdPostmortemPublish, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdIncidentsIncidentIdPostmortemPublish' is set
        if (putPagesPageIdIncidentsIncidentIdPostmortemPublish == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdIncidentsIncidentIdPostmortemPublish' when calling putPagesPageIdIncidentsIncidentIdPostmortemPublish(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemPublishCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortemPublish, _callback);
        return localVarCall;

    }

    /**
     * Publish Postmortem
     * Publish Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortemPublish  (required)
     * @return Postmortem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Publish Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Postmortem putPagesPageIdIncidentsIncidentIdPostmortemPublish(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortemPublish putPagesPageIdIncidentsIncidentIdPostmortemPublish) throws ApiException {
        ApiResponse<Postmortem> localVarResp = putPagesPageIdIncidentsIncidentIdPostmortemPublishWithHttpInfo(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortemPublish);
        return localVarResp.getData();
    }

    /**
     * Publish Postmortem
     * Publish Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortemPublish  (required)
     * @return ApiResponse&lt;Postmortem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Publish Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postmortem> putPagesPageIdIncidentsIncidentIdPostmortemPublishWithHttpInfo(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortemPublish putPagesPageIdIncidentsIncidentIdPostmortemPublish) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemPublishValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortemPublish, null);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish Postmortem (asynchronously)
     * Publish Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param putPagesPageIdIncidentsIncidentIdPostmortemPublish  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Publish Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemPublishAsync(String pageId, String incidentId, PutPagesPageIdIncidentsIncidentIdPostmortemPublish putPagesPageIdIncidentsIncidentIdPostmortemPublish, final ApiCallback<Postmortem> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemPublishValidateBeforeCall(pageId, incidentId, putPagesPageIdIncidentsIncidentIdPostmortemPublish, _callback);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdIncidentsIncidentIdPostmortemRevert
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revert Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemRevertCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/incidents/{incident_id}/postmortem/revert"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "incident_id" + "\\}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemRevertValidateBeforeCall(String pageId, String incidentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdIncidentsIncidentIdPostmortemRevert(Async)");
        }
        
        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling putPagesPageIdIncidentsIncidentIdPostmortemRevert(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemRevertCall(pageId, incidentId, _callback);
        return localVarCall;

    }

    /**
     * Revert Postmortem
     * Revert Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return Postmortem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revert Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Postmortem putPagesPageIdIncidentsIncidentIdPostmortemRevert(String pageId, String incidentId) throws ApiException {
        ApiResponse<Postmortem> localVarResp = putPagesPageIdIncidentsIncidentIdPostmortemRevertWithHttpInfo(pageId, incidentId);
        return localVarResp.getData();
    }

    /**
     * Revert Postmortem
     * Revert Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @return ApiResponse&lt;Postmortem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revert Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Postmortem> putPagesPageIdIncidentsIncidentIdPostmortemRevertWithHttpInfo(String pageId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemRevertValidateBeforeCall(pageId, incidentId, null);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revert Postmortem (asynchronously)
     * Revert Postmortem
     * @param pageId Page identifier (required)
     * @param incidentId Incident Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revert Postmortem </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdIncidentsIncidentIdPostmortemRevertAsync(String pageId, String incidentId, final ApiCallback<Postmortem> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdIncidentsIncidentIdPostmortemRevertValidateBeforeCall(pageId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<Postmortem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
