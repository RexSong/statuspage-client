/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Component;
import org.openapitools.client.model.ComponentUptime;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PatchPagesPageIdComponents;
import org.openapitools.client.model.PostPagesPageIdComponents;
import org.openapitools.client.model.PutPagesPageIdComponents;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComponentsApi {
    private ApiClient localVarApiClient;

    public ComponentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComponentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePagesPageIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdComponentsComponentIdValidateBeforeCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling deletePagesPageIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdCall(pageId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Delete a component
     * Delete a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePagesPageIdComponentsComponentId(String pageId, String componentId) throws ApiException {
        deletePagesPageIdComponentsComponentIdWithHttpInfo(pageId, componentId);
    }

    /**
     * Delete a component
     * Delete a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePagesPageIdComponentsComponentIdWithHttpInfo(String pageId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a component (asynchronously)
     * Delete a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdAsync(String pageId, String componentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdComponentsComponentIdPageAccessGroups
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access groups from a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessGroupsCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}/page_access_groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdComponentsComponentIdPageAccessGroups(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling deletePagesPageIdComponentsComponentIdPageAccessGroups(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessGroupsCall(pageId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Remove page access groups from a component
     * Remove page access groups from a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access groups from a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Component deletePagesPageIdComponentsComponentIdPageAccessGroups(String pageId, String componentId) throws ApiException {
        ApiResponse<Component> localVarResp = deletePagesPageIdComponentsComponentIdPageAccessGroupsWithHttpInfo(pageId, componentId);
        return localVarResp.getData();
    }

    /**
     * Remove page access groups from a component
     * Remove page access groups from a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access groups from a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> deletePagesPageIdComponentsComponentIdPageAccessGroupsWithHttpInfo(String pageId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(pageId, componentId, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove page access groups from a component (asynchronously)
     * Remove page access groups from a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access groups from a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessGroupsAsync(String pageId, String componentId, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(pageId, componentId, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePagesPageIdComponentsComponentIdPageAccessUsers
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access users from component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessUsersCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}/page_access_users"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling deletePagesPageIdComponentsComponentIdPageAccessUsers(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling deletePagesPageIdComponentsComponentIdPageAccessUsers(Async)");
        }
        

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessUsersCall(pageId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Remove page access users from component
     * Remove page access users from component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access users from component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Component deletePagesPageIdComponentsComponentIdPageAccessUsers(String pageId, String componentId) throws ApiException {
        ApiResponse<Component> localVarResp = deletePagesPageIdComponentsComponentIdPageAccessUsersWithHttpInfo(pageId, componentId);
        return localVarResp.getData();
    }

    /**
     * Remove page access users from component
     * Remove page access users from component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access users from component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> deletePagesPageIdComponentsComponentIdPageAccessUsersWithHttpInfo(String pageId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(pageId, componentId, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove page access users from component (asynchronously)
     * Remove page access users from component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove page access users from component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePagesPageIdComponentsComponentIdPageAccessUsersAsync(String pageId, String componentId, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(pageId, componentId, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponents
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of components </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentsValidateBeforeCall(String pageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentsCall(pageId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of components
     * Get a list of components
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of components </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public List<Component> getPagesPageIdComponents(String pageId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Component>> localVarResp = getPagesPageIdComponentsWithHttpInfo(pageId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of components
     * Get a list of components
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of components </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Component>> getPagesPageIdComponentsWithHttpInfo(String pageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentsValidateBeforeCall(pageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of components (asynchronously)
     * Get a list of components
     * @param pageId Page identifier (required)
     * @param page Page offset to fetch. (optional)
     * @param perPage Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of components </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsAsync(String pageId, Integer page, Integer perPage, final ApiCallback<List<Component>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentsValidateBeforeCall(pageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsComponentIdCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentsComponentIdValidateBeforeCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling getPagesPageIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdCall(pageId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Get a component
     * Get a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public Component getPagesPageIdComponentsComponentId(String pageId, String componentId) throws ApiException {
        ApiResponse<Component> localVarResp = getPagesPageIdComponentsComponentIdWithHttpInfo(pageId, componentId);
        return localVarResp.getData();
    }

    /**
     * Get a component
     * Get a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> getPagesPageIdComponentsComponentIdWithHttpInfo(String pageId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a component (asynchronously)
     * Get a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsComponentIdAsync(String pageId, String componentId, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesPageIdComponentsComponentIdUptime
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param start The start date for uptime calculation (defaults to the component&#39;s start_date field or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component that has uptime showcase enabled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsComponentIdUptimeCall(String pageId, String componentId, String start, String end, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}/uptime"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesPageIdComponentsComponentIdUptimeValidateBeforeCall(String pageId, String componentId, String start, String end, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPagesPageIdComponentsComponentIdUptime(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling getPagesPageIdComponentsComponentIdUptime(Async)");
        }
        

        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdUptimeCall(pageId, componentId, start, end, _callback);
        return localVarCall;

    }

    /**
     * Get uptime data for a component
     * Get uptime data for a component that has uptime showcase enabled
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param start The start date for uptime calculation (defaults to the component&#39;s start_date field or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @return ComponentUptime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component that has uptime showcase enabled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ComponentUptime getPagesPageIdComponentsComponentIdUptime(String pageId, String componentId, String start, String end) throws ApiException {
        ApiResponse<ComponentUptime> localVarResp = getPagesPageIdComponentsComponentIdUptimeWithHttpInfo(pageId, componentId, start, end);
        return localVarResp.getData();
    }

    /**
     * Get uptime data for a component
     * Get uptime data for a component that has uptime showcase enabled
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param start The start date for uptime calculation (defaults to the component&#39;s start_date field or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @return ApiResponse&lt;ComponentUptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component that has uptime showcase enabled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComponentUptime> getPagesPageIdComponentsComponentIdUptimeWithHttpInfo(String pageId, String componentId, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdUptimeValidateBeforeCall(pageId, componentId, start, end, null);
        Type localVarReturnType = new TypeToken<ComponentUptime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get uptime data for a component (asynchronously)
     * Get uptime data for a component that has uptime showcase enabled
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param start The start date for uptime calculation (defaults to the component&#39;s start_date field or 90 days ago, whichever is more recent). The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year. If the year and month are given, the start date defaults to the first day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param end The end date for uptime calculation (defaults to today in the page&#39;s time zone). The maximum supported date range is six calendar months. If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month. The earliest supported date is January 1, 1970.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get uptime data for a component that has uptime showcase enabled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesPageIdComponentsComponentIdUptimeAsync(String pageId, String componentId, String start, String end, final ApiCallback<ComponentUptime> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesPageIdComponentsComponentIdUptimeValidateBeforeCall(pageId, componentId, start, end, _callback);
        Type localVarReturnType = new TypeToken<ComponentUptime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPagesPageIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param patchPagesPageIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdComponentsComponentIdCall(String pageId, String componentId, PatchPagesPageIdComponents patchPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchPagesPageIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPagesPageIdComponentsComponentIdValidateBeforeCall(String pageId, String componentId, PatchPagesPageIdComponents patchPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling patchPagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling patchPagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'patchPagesPageIdComponents' is set
        if (patchPagesPageIdComponents == null) {
            throw new ApiException("Missing the required parameter 'patchPagesPageIdComponents' when calling patchPagesPageIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = patchPagesPageIdComponentsComponentIdCall(pageId, componentId, patchPagesPageIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Update a component
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param patchPagesPageIdComponents  (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Component patchPagesPageIdComponentsComponentId(String pageId, String componentId, PatchPagesPageIdComponents patchPagesPageIdComponents) throws ApiException {
        ApiResponse<Component> localVarResp = patchPagesPageIdComponentsComponentIdWithHttpInfo(pageId, componentId, patchPagesPageIdComponents);
        return localVarResp.getData();
    }

    /**
     * Update a component
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param patchPagesPageIdComponents  (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> patchPagesPageIdComponentsComponentIdWithHttpInfo(String pageId, String componentId, PatchPagesPageIdComponents patchPagesPageIdComponents) throws ApiException {
        okhttp3.Call localVarCall = patchPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, patchPagesPageIdComponents, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a component (asynchronously)
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param patchPagesPageIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPagesPageIdComponentsComponentIdAsync(String pageId, String componentId, PatchPagesPageIdComponents patchPagesPageIdComponents, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, patchPagesPageIdComponents, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdComponents
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsCall(String pageId, PostPagesPageIdComponents postPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postPagesPageIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdComponentsValidateBeforeCall(String pageId, PostPagesPageIdComponents postPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdComponents(Async)");
        }
        
        // verify the required parameter 'postPagesPageIdComponents' is set
        if (postPagesPageIdComponents == null) {
            throw new ApiException("Missing the required parameter 'postPagesPageIdComponents' when calling postPagesPageIdComponents(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdComponentsCall(pageId, postPagesPageIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Create a component
     * Create a component
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponents  (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Component postPagesPageIdComponents(String pageId, PostPagesPageIdComponents postPagesPageIdComponents) throws ApiException {
        ApiResponse<Component> localVarResp = postPagesPageIdComponentsWithHttpInfo(pageId, postPagesPageIdComponents);
        return localVarResp.getData();
    }

    /**
     * Create a component
     * Create a component
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponents  (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> postPagesPageIdComponentsWithHttpInfo(String pageId, PostPagesPageIdComponents postPagesPageIdComponents) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdComponentsValidateBeforeCall(pageId, postPagesPageIdComponents, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a component (asynchronously)
     * Create a component
     * @param pageId Page identifier (required)
     * @param postPagesPageIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsAsync(String pageId, PostPagesPageIdComponents postPagesPageIdComponents, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdComponentsValidateBeforeCall(pageId, postPagesPageIdComponents, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdComponentsComponentIdPageAccessGroups
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access groups to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessGroupsCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}/page_access_groups"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(String pageId, String componentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdComponentsComponentIdPageAccessGroups(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling postPagesPageIdComponentsComponentIdPageAccessGroups(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessGroupsCall(pageId, componentId, _callback);
        return localVarCall;

    }

    /**
     * Add page access groups to a component
     * Add page access groups to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access groups to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Component postPagesPageIdComponentsComponentIdPageAccessGroups(String pageId, String componentId) throws ApiException {
        ApiResponse<Component> localVarResp = postPagesPageIdComponentsComponentIdPageAccessGroupsWithHttpInfo(pageId, componentId);
        return localVarResp.getData();
    }

    /**
     * Add page access groups to a component
     * Add page access groups to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access groups to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> postPagesPageIdComponentsComponentIdPageAccessGroupsWithHttpInfo(String pageId, String componentId) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(pageId, componentId, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add page access groups to a component (asynchronously)
     * Add page access groups to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access groups to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessGroupsAsync(String pageId, String componentId, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessGroupsValidateBeforeCall(pageId, componentId, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPagesPageIdComponentsComponentIdPageAccessUsers
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param pageAccessUserIds List of page access users to add to component (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access users to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessUsersCall(String pageId, String componentId, List<String> pageAccessUserIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}/page_access_users"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageAccessUserIds != null) {
            localVarFormParams.put("page_access_user_ids", pageAccessUserIds);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(String pageId, String componentId, List<String> pageAccessUserIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling postPagesPageIdComponentsComponentIdPageAccessUsers(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling postPagesPageIdComponentsComponentIdPageAccessUsers(Async)");
        }
        
        // verify the required parameter 'pageAccessUserIds' is set
        if (pageAccessUserIds == null) {
            throw new ApiException("Missing the required parameter 'pageAccessUserIds' when calling postPagesPageIdComponentsComponentIdPageAccessUsers(Async)");
        }
        

        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessUsersCall(pageId, componentId, pageAccessUserIds, _callback);
        return localVarCall;

    }

    /**
     * Add page access users to a component
     * Add page access users to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param pageAccessUserIds List of page access users to add to component (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access users to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Component postPagesPageIdComponentsComponentIdPageAccessUsers(String pageId, String componentId, List<String> pageAccessUserIds) throws ApiException {
        ApiResponse<Component> localVarResp = postPagesPageIdComponentsComponentIdPageAccessUsersWithHttpInfo(pageId, componentId, pageAccessUserIds);
        return localVarResp.getData();
    }

    /**
     * Add page access users to a component
     * Add page access users to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param pageAccessUserIds List of page access users to add to component (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access users to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> postPagesPageIdComponentsComponentIdPageAccessUsersWithHttpInfo(String pageId, String componentId, List<String> pageAccessUserIds) throws ApiException {
        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(pageId, componentId, pageAccessUserIds, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add page access users to a component (asynchronously)
     * Add page access users to a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param pageAccessUserIds List of page access users to add to component (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add page access users to a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPagesPageIdComponentsComponentIdPageAccessUsersAsync(String pageId, String componentId, List<String> pageAccessUserIds, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPagesPageIdComponentsComponentIdPageAccessUsersValidateBeforeCall(pageId, componentId, pageAccessUserIds, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPagesPageIdComponentsComponentId
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param putPagesPageIdComponents  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdComponentsComponentIdCall(String pageId, String componentId, PutPagesPageIdComponents putPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putPagesPageIdComponents;

        // create path and map variables
        String localVarPath = "/pages/{page_id}/components/{component_id}"
            .replaceAll("\\{" + "page_id" + "\\}", localVarApiClient.escapeString(pageId.toString()))
            .replaceAll("\\{" + "component_id" + "\\}", localVarApiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPagesPageIdComponentsComponentIdValidateBeforeCall(String pageId, String componentId, PutPagesPageIdComponents putPagesPageIdComponents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling putPagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling putPagesPageIdComponentsComponentId(Async)");
        }
        
        // verify the required parameter 'putPagesPageIdComponents' is set
        if (putPagesPageIdComponents == null) {
            throw new ApiException("Missing the required parameter 'putPagesPageIdComponents' when calling putPagesPageIdComponentsComponentId(Async)");
        }
        

        okhttp3.Call localVarCall = putPagesPageIdComponentsComponentIdCall(pageId, componentId, putPagesPageIdComponents, _callback);
        return localVarCall;

    }

    /**
     * Update a component
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param putPagesPageIdComponents  (required)
     * @return Component
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public Component putPagesPageIdComponentsComponentId(String pageId, String componentId, PutPagesPageIdComponents putPagesPageIdComponents) throws ApiException {
        ApiResponse<Component> localVarResp = putPagesPageIdComponentsComponentIdWithHttpInfo(pageId, componentId, putPagesPageIdComponents);
        return localVarResp.getData();
    }

    /**
     * Update a component
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param putPagesPageIdComponents  (required)
     * @return ApiResponse&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Component> putPagesPageIdComponentsComponentIdWithHttpInfo(String pageId, String componentId, PutPagesPageIdComponents putPagesPageIdComponents) throws ApiException {
        okhttp3.Call localVarCall = putPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, putPagesPageIdComponents, null);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a component (asynchronously)
     * Update a component
     * @param pageId Page identifier (required)
     * @param componentId Component identifier (required)
     * @param putPagesPageIdComponents  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a component </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Could not authenticate </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPagesPageIdComponentsComponentIdAsync(String pageId, String componentId, PutPagesPageIdComponents putPagesPageIdComponents, final ApiCallback<Component> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPagesPageIdComponentsComponentIdValidateBeforeCall(pageId, componentId, putPagesPageIdComponents, _callback);
        Type localVarReturnType = new TypeToken<Component>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
