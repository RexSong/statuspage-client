/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.Incident;
import org.openapitools.client.model.PatchPagesPageIdIncidents;
import org.openapitools.client.model.PostPagesPageIdIncidents;
import org.openapitools.client.model.PutPagesPageIdIncidents;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IncidentsApi
 */
@Ignore
public class IncidentsApiTest {

    private final IncidentsApi api = new IncidentsApi();

    
    /**
     * Delete an incident
     *
     * Delete an incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdIncidentsIncidentIdTest() throws ApiException {
        String pageId = null;
        String incidentId = null;
        Incident response = api.deletePagesPageIdIncidentsIncidentId(pageId, incidentId);

        // TODO: test validations
    }
    
    /**
     * Get a list of incidents
     *
     * Get a list of incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsTest() throws ApiException {
        String pageId = null;
        String q = null;
        Integer limit = null;
        Integer page = null;
        List<Incident> response = api.getPagesPageIdIncidents(pageId, q, limit, page);

        // TODO: test validations
    }
    
    /**
     * Get a list of active maintenances
     *
     * Get a list of active maintenances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsActiveMaintenanceTest() throws ApiException {
        String pageId = null;
        Integer page = null;
        Integer perPage = null;
        List<Incident> response = api.getPagesPageIdIncidentsActiveMaintenance(pageId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get an incident
     *
     * Get an incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsIncidentIdTest() throws ApiException {
        String pageId = null;
        String incidentId = null;
        Incident response = api.getPagesPageIdIncidentsIncidentId(pageId, incidentId);

        // TODO: test validations
    }
    
    /**
     * Get a list of scheduled incidents
     *
     * Get a list of scheduled incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsScheduledTest() throws ApiException {
        String pageId = null;
        Integer page = null;
        Integer perPage = null;
        List<Incident> response = api.getPagesPageIdIncidentsScheduled(pageId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get a list of unresolved incidents
     *
     * Get a list of unresolved incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsUnresolvedTest() throws ApiException {
        String pageId = null;
        Integer page = null;
        Integer perPage = null;
        List<Incident> response = api.getPagesPageIdIncidentsUnresolved(pageId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get a list of upcoming incidents
     *
     * Get a list of upcoming incidents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdIncidentsUpcomingTest() throws ApiException {
        String pageId = null;
        Integer page = null;
        Integer perPage = null;
        List<Incident> response = api.getPagesPageIdIncidentsUpcoming(pageId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update an incident
     *
     * Update an incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPagesPageIdIncidentsIncidentIdTest() throws ApiException {
        String pageId = null;
        String incidentId = null;
        PatchPagesPageIdIncidents patchPagesPageIdIncidents = null;
        Incident response = api.patchPagesPageIdIncidentsIncidentId(pageId, incidentId, patchPagesPageIdIncidents);

        // TODO: test validations
    }
    
    /**
     * Create an incident
     *
     * Create an incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdIncidentsTest() throws ApiException {
        String pageId = null;
        PostPagesPageIdIncidents postPagesPageIdIncidents = null;
        Incident response = api.postPagesPageIdIncidents(pageId, postPagesPageIdIncidents);

        // TODO: test validations
    }
    
    /**
     * Update an incident
     *
     * Update an incident
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPagesPageIdIncidentsIncidentIdTest() throws ApiException {
        String pageId = null;
        String incidentId = null;
        PutPagesPageIdIncidents putPagesPageIdIncidents = null;
        Incident response = api.putPagesPageIdIncidentsIncidentId(pageId, incidentId, putPagesPageIdIncidents);

        // TODO: test validations
    }
    
}
