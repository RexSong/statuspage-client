/*
 * Statuspage API
 * # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Component;
import org.openapitools.client.model.ComponentUptime;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.PatchPagesPageIdComponents;
import org.openapitools.client.model.PostPagesPageIdComponents;
import org.openapitools.client.model.PutPagesPageIdComponents;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComponentsApi
 */
@Ignore
public class ComponentsApiTest {

    private final ComponentsApi api = new ComponentsApi();

    
    /**
     * Delete a component
     *
     * Delete a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdComponentsComponentIdTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        api.deletePagesPageIdComponentsComponentId(pageId, componentId);

        // TODO: test validations
    }
    
    /**
     * Remove page access groups from a component
     *
     * Remove page access groups from a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdComponentsComponentIdPageAccessGroupsTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        Component response = api.deletePagesPageIdComponentsComponentIdPageAccessGroups(pageId, componentId);

        // TODO: test validations
    }
    
    /**
     * Remove page access users from component
     *
     * Remove page access users from component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePagesPageIdComponentsComponentIdPageAccessUsersTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        Component response = api.deletePagesPageIdComponentsComponentIdPageAccessUsers(pageId, componentId);

        // TODO: test validations
    }
    
    /**
     * Get a list of components
     *
     * Get a list of components
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdComponentsTest() throws ApiException {
        String pageId = null;
        Integer page = null;
        Integer perPage = null;
        List<Component> response = api.getPagesPageIdComponents(pageId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get a component
     *
     * Get a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdComponentsComponentIdTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        Component response = api.getPagesPageIdComponentsComponentId(pageId, componentId);

        // TODO: test validations
    }
    
    /**
     * Get uptime data for a component
     *
     * Get uptime data for a component that has uptime showcase enabled
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPagesPageIdComponentsComponentIdUptimeTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        String start = null;
        String end = null;
        ComponentUptime response = api.getPagesPageIdComponentsComponentIdUptime(pageId, componentId, start, end);

        // TODO: test validations
    }
    
    /**
     * Update a component
     *
     * Update a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPagesPageIdComponentsComponentIdTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        PatchPagesPageIdComponents patchPagesPageIdComponents = null;
        Component response = api.patchPagesPageIdComponentsComponentId(pageId, componentId, patchPagesPageIdComponents);

        // TODO: test validations
    }
    
    /**
     * Create a component
     *
     * Create a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdComponentsTest() throws ApiException {
        String pageId = null;
        PostPagesPageIdComponents postPagesPageIdComponents = null;
        Component response = api.postPagesPageIdComponents(pageId, postPagesPageIdComponents);

        // TODO: test validations
    }
    
    /**
     * Add page access groups to a component
     *
     * Add page access groups to a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdComponentsComponentIdPageAccessGroupsTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        Component response = api.postPagesPageIdComponentsComponentIdPageAccessGroups(pageId, componentId);

        // TODO: test validations
    }
    
    /**
     * Add page access users to a component
     *
     * Add page access users to a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPagesPageIdComponentsComponentIdPageAccessUsersTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        List<String> pageAccessUserIds = null;
        Component response = api.postPagesPageIdComponentsComponentIdPageAccessUsers(pageId, componentId, pageAccessUserIds);

        // TODO: test validations
    }
    
    /**
     * Update a component
     *
     * Update a component
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPagesPageIdComponentsComponentIdTest() throws ApiException {
        String pageId = null;
        String componentId = null;
        PutPagesPageIdComponents putPagesPageIdComponents = null;
        Component response = api.putPagesPageIdComponentsComponentId(pageId, componentId, putPagesPageIdComponents);

        // TODO: test validations
    }
    
}
